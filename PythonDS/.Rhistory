"data.frame"), row.names = c(NA, -6L), .internal.selfref = <pointer: 0x0000000000100788>)
>Â 
a<-[2/23/2017 1:18 PM] Jason Miller:
No Title
structure(list(OppSFid = c("006o000000IBhVIAA1", "006o000000CJjkxAAD",Â 
"006o0000009YIHZAA4", "006o0000009YIHZAA4", "006o000000DPKokAAH",Â 
"006o0000006qCY9AAM"), BannerId = c("A00010834", "A00012251",Â 
"A00013460", "A00013460", "A00014245", "A00015033"), state = c("PA",Â 
"GA", "FL", "FL", "MN", "GA"), Channel = c("Web Properties",Â 
"Other", "Other", "Other", "Web Properties", "Web - Search - Generic"
), program = c("PhD Psychology", "EDD", "PhD Psychology", "PhD Psychology",Â 
"MPH", "PhD Psychology"), Level = c("PHD", "PHD", "PHD", "PHD",Â 
"MS", "PHD"), college = c("CSBS", "COEL", "CSBS", "CSBS", "COHS",Â 
"CSBS"), Inq_date = c("02FEB2016", "23JUN2015", "18MAR2015",Â 
"18MAR2015", "20JUL2015", "10OCT2014"), Enr_date = c("29AUG2016",Â 
"31AUG2015", "30NOV2015", "30NOV2015", "31AUG2015", "29FEB2016"
), term_start = c("29AUG2016", "31AUG2015", "30NOV2015", "30NOV2015",Â 
"31AUG2015", "29FEB2016"), SQ_flag = c("Q", "Q", "Q", "Q", "Q",Â 
"Q"), registration_tuition = c(2925, 1150, 2875, 2875, 2225,Â 
2925), total_charge = c(2925, 1150, 2875, 2875, 2225, 2925),Â 
exemption_amt = c(500, 500, 1000, 1000, 0, 1000), exemption_std = c("5K Grant",Â 
"3K Grant", "5K Grant", "5K Grant", "No Offer", "3K Grant"
), uid = c(1L, 3L, 7L, 7L, 9L, 13L), term = c("201670", "201570",Â 
"201610", "201610", "201570", "201630"), credits_attempted = c(1,Â 
1, 1, 1, 1, 1), taxa = c("PhD Psychology 29AUG2016", "EDD 31AUG2015",Â 
"PhD Psychology 30NOV2015", "PhD Psychology 30NOV2015", "MPH 31AUG2015",Â 
"PhD Psychology 29FEB2016"), net_price = c(2425, 650, 1875,Â 
1875, 2225, 1925), flag_conversion = c(1, 1, 1, 1, 1, 1)), .Names = c("OppSFid",Â 
"BannerId", "state", "Channel", "program", "Level", "college",Â 
"Inq_date", "Enr_date", "term_start", "SQ_flag", "registration_tuition",Â 
"total_charge", "exemption_amt", "exemption_std", "uid", "term",Â 
"credits_attempted", "taxa", "net_price", "flag_conversion"), class = c("data.table",Â 
"data.frame"), row.names = c(NA, -6L), .internal.selfref = <pointer: 0x0000000000100788>)
a<-
structure(list(OppSFid = c("006o000000IBhVIAA1", "006o000000CJjkxAAD",Â 
"006o0000009YIHZAA4", "006o0000009YIHZAA4", "006o000000DPKokAAH",Â 
"006o0000006qCY9AAM"), BannerId = c("A00010834", "A00012251",Â 
"A00013460", "A00013460", "A00014245", "A00015033"), state = c("PA",Â 
"GA", "FL", "FL", "MN", "GA"), Channel = c("Web Properties",Â 
"Other", "Other", "Other", "Web Properties", "Web - Search - Generic"
), program = c("PhD Psychology", "EDD", "PhD Psychology", "PhD Psychology",Â 
"MPH", "PhD Psychology"), Level = c("PHD", "PHD", "PHD", "PHD",Â 
"MS", "PHD"), college = c("CSBS", "COEL", "CSBS", "CSBS", "COHS",Â 
"CSBS"), Inq_date = c("02FEB2016", "23JUN2015", "18MAR2015",Â 
"18MAR2015", "20JUL2015", "10OCT2014"), Enr_date = c("29AUG2016",Â 
"31AUG2015", "30NOV2015", "30NOV2015", "31AUG2015", "29FEB2016"
), term_start = c("29AUG2016", "31AUG2015", "30NOV2015", "30NOV2015",Â 
"31AUG2015", "29FEB2016"), SQ_flag = c("Q", "Q", "Q", "Q", "Q",Â 
"Q"), registration_tuition = c(2925, 1150, 2875, 2875, 2225,Â 
2925), total_charge = c(2925, 1150, 2875, 2875, 2225, 2925),Â 
exemption_amt = c(500, 500, 1000, 1000, 0, 1000), exemption_std = c("5K Grant",Â 
"3K Grant", "5K Grant", "5K Grant", "No Offer", "3K Grant"
), uid = c(1L, 3L, 7L, 7L, 9L, 13L), term = c("201670", "201570",Â 
"201610", "201610", "201570", "201630"), credits_attempted = c(1,Â 
1, 1, 1, 1, 1), taxa = c("PhD Psychology 29AUG2016", "EDD 31AUG2015",Â 
"PhD Psychology 30NOV2015", "PhD Psychology 30NOV2015", "MPH 31AUG2015",Â 
"PhD Psychology 29FEB2016"), net_price = c(2425, 650, 1875,Â 
1875, 2225, 1925), flag_conversion = c(1, 1, 1, 1, 1, 1)), .Names = c("OppSFid",Â 
"BannerId", "state", "Channel", "program", "Level", "college",Â 
"Inq_date", "Enr_date", "term_start", "SQ_flag", "registration_tuition",Â 
"total_charge", "exemption_amt", "exemption_std", "uid", "term",Â 
"credits_attempted", "taxa", "net_price", "flag_conversion"), class = c("data.table",Â 
"data.frame"), row.names = c(NA, -6L), .internal.selfref = <pointer: 0x0000000000100788>)
a
a1<-
structure(list(OppSFid = c("006o000000IBhVIAA1", "006o000000CJjkxAAD",Â 
"006o0000009YIHZAA4", "006o0000009YIHZAA4", "006o000000DPKokAAH",Â 
"006o0000006qCY9AAM"), BannerId = c("A00010834", "A00012251",Â 
"A00013460", "A00013460", "A00014245", "A00015033"), state = c("PA",Â 
"GA", "FL", "FL", "MN", "GA"), Channel = c("Web Properties",Â 
"Other", "Other", "Other", "Web Properties", "Web - Search - Generic"
), program = c("PhD Psychology", "EDD", "PhD Psychology", "PhD Psychology",Â 
"MPH", "PhD Psychology"), Level = c("PHD", "PHD", "PHD", "PHD",Â 
"MS", "PHD"), college = c("CSBS", "COEL", "CSBS", "CSBS", "COHS",Â 
"CSBS"), Inq_date = c("02FEB2016", "23JUN2015", "18MAR2015",Â 
"18MAR2015", "20JUL2015", "10OCT2014"), Enr_date = c("29AUG2016",Â 
"31AUG2015", "30NOV2015", "30NOV2015", "31AUG2015", "29FEB2016"
), term_start = c("29AUG2016", "31AUG2015", "30NOV2015", "30NOV2015",Â 
"31AUG2015", "29FEB2016"), SQ_flag = c("Q", "Q", "Q", "Q", "Q",Â 
"Q"), registration_tuition = c(2925, 1150, 2875, 2875, 2225,Â 
2925), total_charge = c(2925, 1150, 2875, 2875, 2225, 2925),Â 
exemption_amt = c(500, 500, 1000, 1000, 0, 1000), exemption_std = c("5K Grant",Â 
"3K Grant", "5K Grant", "5K Grant", "No Offer", "3K Grant"
), uid = c(1L, 3L, 7L, 7L, 9L, 13L), term = c("201670", "201570",Â 
"201610", "201610", "201570", "201630"), credits_attempted = c(1,Â 
1, 1, 1, 1, 1), taxa = c("PhD Psychology 29AUG2016", "EDD 31AUG2015",Â 
"PhD Psychology 30NOV2015", "PhD Psychology 30NOV2015", "MPH 31AUG2015",Â 
"PhD Psychology 29FEB2016"), net_price = c(2425, 650, 1875,Â 
1875, 2225, 1925), flag_conversion = c(1, 1, 1, 1, 1, 1)), .Names = c("OppSFid",Â 
"BannerId", "state", "Channel", "program", "Level", "college",Â 
"Inq_date", "Enr_date", "term_start", "SQ_flag", "registration_tuition",Â 
"total_charge", "exemption_amt", "exemption_std", "uid", "term",Â 
"credits_attempted", "taxa", "net_price", "flag_conversion"), class = c("data.table",Â 
"data.frame"), row.names = c(NA, -6L), .internal.selfref = <pointer: 0x0000000000100788>)
a1
a1<-structure(list(OppSFid = c("006o000000IBhVIAA1", "006o000000CJjkxAAD",Â 
"006o0000009YIHZAA4", "006o0000009YIHZAA4", "006o000000DPKokAAH",Â 
"006o0000006qCY9AAM"), BannerId = c("A00010834", "A00012251",Â 
"A00013460", "A00013460", "A00014245", "A00015033"), state = c("PA",Â 
"GA", "FL", "FL", "MN", "GA"), Channel = c("Web Properties",Â 
"Other", "Other", "Other", "Web Properties", "Web - Search - Generic"
), program = c("PhD Psychology", "EDD", "PhD Psychology", "PhD Psychology",Â 
"MPH", "PhD Psychology"), Level = c("PHD", "PHD", "PHD", "PHD",Â 
"MS", "PHD"), college = c("CSBS", "COEL", "CSBS", "CSBS", "COHS",Â 
"CSBS"), Inq_date = c("02FEB2016", "23JUN2015", "18MAR2015",Â 
"18MAR2015", "20JUL2015", "10OCT2014"), Enr_date = c("29AUG2016",Â 
"31AUG2015", "30NOV2015", "30NOV2015", "31AUG2015", "29FEB2016"
), term_start = c("29AUG2016", "31AUG2015", "30NOV2015", "30NOV2015",Â 
"31AUG2015", "29FEB2016"), SQ_flag = c("Q", "Q", "Q", "Q", "Q",Â 
"Q"), registration_tuition = c(2925, 1150, 2875, 2875, 2225,Â 
2925), total_charge = c(2925, 1150, 2875, 2875, 2225, 2925),Â 
exemption_amt = c(500, 500, 1000, 1000, 0, 1000), exemption_std = c("5K Grant",Â 
"3K Grant", "5K Grant", "5K Grant", "No Offer", "3K Grant"
), uid = c(1L, 3L, 7L, 7L, 9L, 13L), term = c("201670", "201570",Â 
"201610", "201610", "201570", "201630"), credits_attempted = c(1,Â 
1, 1, 1, 1, 1), taxa = c("PhD Psychology 29AUG2016", "EDD 31AUG2015",Â 
"PhD Psychology 30NOV2015", "PhD Psychology 30NOV2015", "MPH 31AUG2015",Â 
"PhD Psychology 29FEB2016"), net_price = c(2425, 650, 1875,Â 
1875, 2225, 1925), flag_conversion = c(1, 1, 1, 1, 1, 1)), .Names = c("OppSFid",Â 
"BannerId", "state", "Channel", "program", "Level", "college",Â 
"Inq_date", "Enr_date", "term_start", "SQ_flag", "registration_tuition",Â 
"total_charge", "exemption_amt", "exemption_std", "uid", "term",Â 
"credits_attempted", "taxa", "net_price", "flag_conversion"), class = c("data.table",Â 
"data.frame"), row.names = c(NA, -6L), .internal.selfref = <pointer: 0x0000000000100788>)
a1
mkPredN <- function(outCol,varCol,appCol) {
cuts <- unique(as.numeric(quantile(varCol,
probs=seq(0, 1, 0.1),na.rm=T)))
varC <- cut(varCol,cuts)
appC <- cut(appCol,cuts)
mkPredC(outCol,varC,appC)
}
pred <- mkPredN(train$risk, train$future, test$future)
pred[0:5]
type(pred)
class(pred)
pred
pred[0:8]
length(pred)
unique(pred)
table(pred)
outCol = train$risk
varCol = train$future
appCol = train$future
cuts <- unique(as.numeric(quantile(varCol,
probs=seq(0, 1, 0.1),na.rm=T)))
cuts
varC <- cut(varCol,cuts)
varC
str(varC)
table(varC)
length(varC)
nrow(train)
summary(train$cp_prior3mon_pay_total)
summary(train$future)
data <- read.table('Collection_Risk.csv', header = TRUE, sep = ',')
names(data) <- tolower(names(data))
outcome <- 'risk'
pos <- '1'
num_to_cat <- c('risk', 'in_module', 'in_future', 'in_dissertation')
for (fac in num_to_cat){
data[, fac] <- as.factor(data[, fac])
}
#utility functions to explore single feature v.s. the target
single_cat <- function(dSet, feature, target = 'risk') {
#for categorical feature
print(sum(is.na(dSet[, feature])))
tab <- table(feature = as.factor(dSet[, feature]),
target = dSet[, target])
print(tab)
print(tab[,2]/(tab[, 1] + tab[, 2] ))
}
single_num <- function(dSet, feature, target = 'risk'){
#for numerical feature
print(sum(is.na(dSet[, feature])))
print(summary(dSet[, feature]))
plot(dSet[,feature] ~ dSet[, target])
print(summary(dSet[dSet[, target]  != pos, feature]))
print(summary(dSet[dSet[, target]  == pos, feature]))
}
# use July, August and Sept for training, Oct for testing
train <- data[data$ind <= 9, ]
test <- data[data$ind == 10, ]
nrow(train)
summary(train$cp_prior3mon_pay_total)
cuts
varC <- cut(varCol,cuts)
table(varC)
varCol = train$future
nrow(varC)
length(varC)
table(varC, na.rm = FALSE)
varC[1:5]
?table
table(varC, useNA = 'ifany')
q()
require(ggplot2)
require(ROCR)
require(dplyr)
data <- read.table('Collection_Risk.csv', header = TRUE, sep = ',')
names(data) <- tolower(names(data))
outcome <- 'risk'
pos <- '1'
num_to_cat <- c('risk', 'in_module', 'in_future', 'in_dissertation')
for (fac in num_to_cat){
data[, fac] <- as.factor(data[, fac])
}
#utility functions to explore single feature v.s. the target
single_cat <- function(dSet, feature, target = 'risk') {
#for categorical feature
print(sum(is.na(dSet[, feature])))
tab <- table(feature = as.factor(dSet[, feature]),
target = dSet[, target])
print(tab)
print(tab[,2]/(tab[, 1] + tab[, 2] ))
}
single_num <- function(dSet, feature, target = 'risk'){
#for numerical feature
print(sum(is.na(dSet[, feature])))
print(summary(dSet[, feature]))
plot(dSet[,feature] ~ dSet[, target])
print(summary(dSet[dSet[, target]  != pos, feature]))
print(summary(dSet[dSet[, target]  == pos, feature]))
}
# use July, August and Sept for training, Oct for testing
train <- data[data$ind <= 9, ]
test <- data[data$ind == 10, ]
#0 target
table(train[, outcome])
#reasonable balanced
#1 future
single_num(train, 'future')
ggplot(train) + geom_density(aes(x=future))
#no NA.
#nearly 50% < 10, also significant around 1100
# and it seems to suggest that people with certain future balance
# are more likely to pay? makes sense?
#2 aging
# step increase by 30 days
single_num(train, 'aging')
single_cat(train, 'aging')
# no NA.
# clearly longer aging --> higher risk
#3 program
single_cat(train, 'program')
#no NA
# the risk somewhat varies by programs,
#4 degree
single_cat(train, 'degree')
#no NA
# no significant difference across degrees,
# MA has  somewhat less risk rate
#5 college
single_cat(train, 'college')
# no NA
# There is some observable difference across colleges
#6 bb_activity_latest
single_num(train, 'bb_activity_latest')
ggplot(data=train) +
geom_density(aes(x = bb_activity_latest,
color = risk,
linetype = risk ))
# agrees with intuition, people with recent activities are less risky
# could be a good factor
#7 bb_gip_etc_ratio_std
single_num(train, 'bb_gip_etc_ratio_std')
# 1975 missing value, quite a lot, nearly 25%,
# will not use unless really necessary
#8 cum_gpa
single_num(train, 'cum_gpa')
ggplot(data=train) +
geom_density(aes(x = cum_gpa,
color = risk,
linetype = risk ))
#no NA
# risky students generally have lower gpa
#9 cum_credits
single_num(train, 'cum_credits')
#no NA, agrees with intuition, more credits --> less risky
#10. ba_credits_passed_prior1yr
single_num(train, 'ba_credits_passed_prior1yr')
ggplot(data=train) +
geom_density(aes(x = ba_credits_passed_prior1yr,
color = risk,
linetype = risk ))
#no NA, reasonable range
# more credits --> less risky
#11 ba_age
single_num(train, 'ba_age')
summary(train$ba_age)
# 3 NA's,  some wrong data: age = 121, or 0?
# seems not very useful, will not consider in 1st round
#12 gender
single_cat(train, 'gender')
# 3 blank, 16 Unknown
# set blank to unknown
train[train$gender == '', 'gender'] = 'N'
train$gender <- droplevels(train$gender)
# very few N, keeping them in case N appears in the test data
# might be marginally useful, but case N has too few instances.
#13 cp_prior3mon_pay_cnt
# directly derived from cp_prior3mon_pay_total
single_num(train, 'cp_prior3mon_pay_cnt')
single_cat(train, 'cp_prior3mon_pay_cnt')
# it seems that the big difference is whether it's 0 or >0,
# probably cp_prior3mon_pay_total is sufficient
#14 cp_prior3mon_pay_total
single_num(train, 'cp_prior3mon_pay_total')
# 1 negative -814.8, error? will remove this row
# 1 big positive > 2700 = 6717, outlier? will remove this row
train <- train[train$cp_prior3mon_pay_total >= 0 &
train$cp_prior3mon_pay_total < 2700, ]
single_num(train, 'cp_prior3mon_pay_total')
ggplot(data=train) +
geom_density(aes(x = cp_prior3mon_pay_total,
color = risk,
linetype = risk ))
# more payment --> less risky
#15 payment_auto_flag
# useless
#16 risk
#17 nation_desc
# 160 levels with many low count,
# will not consider in 1st round
a <- levels(train$nation_desc)
lowNation <- c('')
for(i in 1:length(a)){
if (sum(train$nation_desc == a[i]) <= 50){
lowNation <- c(lowNation, a[i])
}
}
train$nation_tr <- as.character(train$nation_desc)
train[train$nation_tr %in% lowNation, ]$nation_tr <- 'Other'
train$nation_tr <- as.factor(train$nation_tr)
train$nation_tr <- droplevels(train$nation_tr)
single_cat(train, 'nation_tr')
#18 current_balance
single_num(train, 'current_balance')
ggplot(data=train) +
geom_density(aes(x = current_balance,
color = risk,
linetype = risk ))
# less balance -> less risky
#19 module_cp
single_num(train, 'module_cp')
# no NA, generally more module, less risky
#20 in_module
single_cat(train, 'in_module')
# people in module are significantly less risky
#21 in_future
single_cat(train, 'in_future')
# people who have registered a future module
# are significantly less risky
#22 in_dissertation
single_cat(train, 'in_dissertation')
# people who are in a dissertation module are less risky,
# but few people are in such modules
#23 day_since_end
single_num(train, 'day_since_end')
ggplot(data=train) +
geom_density(aes(x = day_since_end,
color = risk,
linetype = risk ))
# no clear significant difference
#24 day_since_begin
single_num(train, 'day_since_begin')
# correlated with in_module
#25 day_to_begin
single_num(train, 'day_to_begin')
# likely correlated with in_future
#####################################################
vars <- setdiff(names(train), c('student_id', 'risk','bb_gip_etc_ratio_std',
'cp_prior3mon_pay_cnt', 'payment_auto_flag',
'payment_auto_flag', 'nation_desc', 'ind'))
catVars <- vars[sapply(train[,vars],class) %in%
c('factor','character')]
numericVars <- vars[sapply(train[,vars],class) %in%
c('numeric','integer')]
# some variables are highly correlated,
# for example, module_cp, cum_gpa, cum_credits etc.
#########################################################3
# explore one-variable model
mkPredC <- function(outCol,varCol,appCol) {
pPos <- sum(outCol==pos)/length(outCol)
vTab <- table(as.factor(outCol),varCol)
pPosWv <- (vTab[pos,]+1.0e-3*pPos)/(colSums(vTab)+1.0e-3)
pred <- pPosWv[appCol]
pred[is.na(pred)] <- pPos
pred
}
mkPredN <- function(outCol,varCol,appCol) {
cuts <- unique(as.numeric(quantile(varCol,
probs=seq(0, 1, 0.1),na.rm=T)))
varC <- cut(varCol,cuts)
appC <- cut(appCol,cuts)
mkPredC(outCol,varC,appC)
}
nrow(train)
outCol <- train$risk
varCol <- train$future
appCol <- test$future
summary(varCol)
summary(train$future)
cuts <- unique(as.numeric(quantile(varCol,
probs=seq(0, 1, 0.1),na.rm=T)))
cuts
sum(is.na(varCol))
varC <- cut(varCol,cuts)
length(varC)
sum(is.na(varC))
?cut
summary(varCol)
cuts
varC[1:20]
a <- varCol[1:20]
a
cuts
sum(varCol == 0.0)
varScore
cuts
cuts[0]
cuts[1]
cuts[[1]]
cuts[[1]] = cuts[[1]] - 0.1
cuts
varC <- cut(varCol,cuts)
sum(is.na(varC))
table(varC)
mkPredN <- function(outCol,varCol,appCol) {
cuts <- unique(as.numeric(quantile(varCol,
probs=seq(0, 1, 0.1),na.rm=T)))
#move the lowest bound to the left a bit
#otherwise the smallest value may not find an interval
cuts[[1]] <- cuts[[1]] - 0.1
varC <- cut(varCol,cuts)
appC <- cut(appCol,cuts)
mkPredC(outCol,varC,appC)
}
calcAUC <- function(predcol,outcol) {
#calculated auc
perf <- performance(prediction(predcol,outcol==pos),'auc')
as.numeric(perf@y.values)
}
# use July and August as train, Sep as validation
train0 <- train[train$ind <= 8, ]
valid0 <- train[train$ind == 9, ]
#scale and centralize numerical variables of train0
train0_num_sd <- scale(train0[, numericVars])
means <- attr(train0_num_sd, "scaled:center")
stds <- attr(train0_num_sd, "scaled:scale")
train0[, numericVars] <- data.frame(train0_num_sd)
# use the same mean/std to transform valid0
valid0_num <- valid0[, numericVars]
valid0_num <- t(apply(valid0_num, 1, '-', means))
valid0_num <- t(apply(valid0_num, 1, '/', stds))
valid0[, numericVars] <- data.frame(valid0_num)
### check auc for one-variable models
for(v in numericVars) {
pi <- paste('pred',v,sep='')
train0[,pi] <- mkPredN(train0[,outcome],train0[,v],train0[,v])
valid0[,pi] <- mkPredN(train0[,outcome],train0[,v],valid0[,v])
aucTrain <- calcAUC(train0[,pi],train0[,outcome])
aucCal <- calcAUC(valid0[,pi], valid0[,outcome])
print(sprintf("%s, trainAUC: %4.3f calibrationAUC: %4.3f",
pi,aucTrain,aucCal))
}
for(v in catVars) {
pi <- paste('pred',v,sep='')
train0[,pi] <- mkPredC(train0[,outcome],train0[,v],train0[,v])
valid0[,pi] <- mkPredC(train0[,outcome],train0[,v],valid0[,v])
aucTrain <- calcAUC(train0[,pi], train0[,outcome])
aucCal <- calcAUC(valid0[,pi], valid0[,outcome])
print(sprintf("%s, trainAUC: %4.3f calibrationAUC: %4.3f",
pi,aucTrain,aucCal))
}
pred <- mkPredN(train$risk, train$cum_gpa, test$cum_gpa)
length(pred)
summary(pred)
outCol <- train$risk
varCol <- train$cum_gpa
appCol <- test$cum_gpa
cuts <- unique(as.numeric(quantile(varCol,
probs=seq(0, 1, 0.1),na.rm=T)))
varC <- cut(varCol,cuts)
cuts
table(varC)
sum(is.na(varC))
cuts[[1]] <- cuts[[1]] - 0.1
varC <- cut(varCol,cuts)
table(varC)
mkPredN <- function(outCol,varCol,appCol) {
cuts <- unique(as.numeric(quantile(varCol,
probs=seq(0, 1, 0.1),na.rm=T)))
#move the lowest bound to the left a bit
#otherwise the smallest value may not find an interval
cuts[[1]] <- cuts[[1]] - 0.1
varC <- cut(varCol,cuts)
appC <- cut(appCol,cuts)
mkPredC(outCol,varC,appC)
}
pred <- mkPredN(train$risk, train$cum_gpa, test$cum_gpa)
summary(pred)
appC <- cut(appCol, cuts)
table(appC)
table(varC)
varCol <- varC
appCol <- appC
pPos <- sum(outCol==pos)/length(outCol)
pPos
vTab <- table(as.factor(outCol),varCol)
vTab
q()
