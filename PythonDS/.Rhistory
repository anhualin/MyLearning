(-1 + (args[1]-args[2])*o_elast/args[2])
c(gx, gy)
}
constraint_matrix     <- matrix(c(1,0,1,0,1,-1),ncol=2)
constraint_vector     <- c(0,0,0)
# Note: feasible region =  ui %*% theta - ci >= 0
constrOptim(theta   = c(args[1], # gross price
args[2]  # offer amount
),
f       = rev_fn,
grad    = gr,
ui      = constraint_matrix, # constraint matrix (k x p)
ci      = constraint_vector, # constraint vector of length k
control = list(fnscale = -1) # maximization
)
par()
res <-constrOptim(theta   = c(args[1], # gross price
args[2]  # offer amount
),
f       = rev_fn,
grad    = gr,
ui      = constraint_matrix, # constraint matrix (k x p)
ci      = constraint_vector, # constraint vector of length k
control = list(fnscale = -1) # maximization
)
res
res$par
x <- res$par[1]
y <- res$par[2]
x
y
args <-c(x,y)
gr(args)
rev_fn(args = )
rev_fn(args = args)
x
y
power(x,0.65)
power(x)
2^3
x^0.65
y^0.66
y^0.66 / (x^0.65)
x-y
q()
q()
require(ggplot2)
require(ROCR)
require(dplyr)
data <- read.table('Collection_Risk.csv', header = TRUE, sep = ',')
names(data) <- tolower(names(data))
outcome <- 'risk'
pos <- '1'
num_to_cat <- c('risk', 'in_module', 'in_future', 'in_dissertation')
for (fac in num_to_cat){
data[, fac] <- as.factor(data[, fac])
}
#utility functions to explore single feature v.s. the target
single_cat <- function(dSet, feature, target = 'risk') {
#for categorical feature
print(sum(is.na(dSet[, feature])))
tab <- table(feature = as.factor(dSet[, feature]),
target = dSet[, target])
print(tab)
print(tab[,2]/(tab[, 1] + tab[, 2] ))
}
single_num <- function(dSet, feature, target = 'risk'){
#for numerical feature
print(sum(is.na(dSet[, feature])))
print(summary(dSet[, feature]))
plot(dSet[,feature] ~ dSet[, target])
print(summary(dSet[dSet[, target]  != pos, feature]))
print(summary(dSet[dSet[, target]  == pos, feature]))
}
# use July, August and Sept for training, Oct for testing
train <- data[data$ind <= 9, ]
test <- data[data$ind == 10, ]
#0 target
table(train[, outcome])
#reasonable balanced
#1 future
single_num(train, 'future')
ggplot(train) + geom_density(aes(x=future))
#no NA.
#nearly 50% < 10, also significant around 1100
# and it seems to suggest that people with certain future balance
# are more likely to pay? makes sense?
#2 aging
# step increase by 30 days
single_num(train, 'aging')
single_cat(train, 'aging')
# no NA.
# clearly longer aging --> higher risk
#3 program
single_cat(train, 'program')
#no NA
# the risk somewhat varies by programs,
#4 degree
single_cat(train, 'degree')
#no NA
# no significant difference across degrees,
# MA has  somewhat less risk rate
#5 college
single_cat(train, 'college')
# no NA
# There is some observable difference across colleges
#6 bb_activity_latest
single_num(train, 'bb_activity_latest')
ggplot(data=train) +
geom_density(aes(x = bb_activity_latest,
color = risk,
linetype = risk ))
# agrees with intuition, people with recent activities are less risky
# could be a good factor
#7 bb_gip_etc_ratio_std
single_num(train, 'bb_gip_etc_ratio_std')
# 1975 missing value, quite a lot, nearly 25%,
# will not use unless really necessary
#8 cum_gpa
single_num(train, 'cum_gpa')
ggplot(data=train) +
geom_density(aes(x = cum_gpa,
color = risk,
linetype = risk ))
#no NA
# risky students generally have lower gpa
#9 cum_credits
single_num(train, 'cum_credits')
#no NA, agrees with intuition, more credits --> less risky
#10. ba_credits_passed_prior1yr
single_num(train, 'ba_credits_passed_prior1yr')
ggplot(data=train) +
geom_density(aes(x = ba_credits_passed_prior1yr,
color = risk,
linetype = risk ))
#no NA, reasonable range
# more credits --> less risky
#11 ba_age
single_num(train, 'ba_age')
summary(train$ba_age)
# 3 NA's,  some wrong data: age = 121, or 0?
# seems not very useful, will not consider in 1st round
#12 gender
single_cat(train, 'gender')
# 3 blank, 16 Unknown
# set blank to unknown
train[train$gender == '', 'gender'] = 'N'
train$gender <- droplevels(train$gender)
# very few N, keeping them in case N appears in the test data
# might be marginally useful, but case N has too few instances.
#13 cp_prior3mon_pay_cnt
# directly derived from cp_prior3mon_pay_total
single_num(train, 'cp_prior3mon_pay_cnt')
single_cat(train, 'cp_prior3mon_pay_cnt')
# it seems that the big difference is whether it's 0 or >0,
# probably cp_prior3mon_pay_total is sufficient
#14 cp_prior3mon_pay_total
single_num(train, 'cp_prior3mon_pay_total')
# 1 negative -814.8, error? will remove this row
# 1 big positive > 2700 = 6717, outlier? will remove this row
train <- train[train$cp_prior3mon_pay_total >= 0 &
train$cp_prior3mon_pay_total < 2700, ]
single_num(train, 'cp_prior3mon_pay_total')
ggplot(data=train) +
geom_density(aes(x = cp_prior3mon_pay_total,
color = risk,
linetype = risk ))
# more payment --> less risky
#15 payment_auto_flag
# useless
#16 risk
#17 nation_desc
# 160 levels with many low count,
# will not consider in 1st round
a <- levels(train$nation_desc)
lowNation <- c('')
for(i in 1:length(a)){
if (sum(train$nation_desc == a[i]) <= 50){
lowNation <- c(lowNation, a[i])
}
}
train$nation_tr <- as.character(train$nation_desc)
train[train$nation_tr %in% lowNation, ]$nation_tr <- 'Other'
train$nation_tr <- as.factor(train$nation_tr)
train$nation_tr <- droplevels(train$nation_tr)
single_cat(train, 'nation_tr')
#18 current_balance
single_num(train, 'current_balance')
ggplot(data=train) +
geom_density(aes(x = current_balance,
color = risk,
linetype = risk ))
# less balance -> less risky
#19 module_cp
single_num(train, 'module_cp')
# no NA, generally more module, less risky
#20 in_module
single_cat(train, 'in_module')
# people in module are significantly less risky
#21 in_future
single_cat(train, 'in_future')
# people who have registered a future module
# are significantly less risky
#22 in_dissertation
single_cat(train, 'in_dissertation')
# people who are in a dissertation module are less risky,
# but few people are in such modules
#23 day_since_end
single_num(train, 'day_since_end')
ggplot(data=train) +
geom_density(aes(x = day_since_end,
color = risk,
linetype = risk ))
# no clear significant difference
#24 day_since_begin
single_num(train, 'day_since_begin')
# correlated with in_module
#25 day_to_begin
single_num(train, 'day_to_begin')
# likely correlated with in_future
#####################################################
vars <- setdiff(names(train), c('student_id', 'risk','bb_gip_etc_ratio_std',
'cp_prior3mon_pay_cnt', 'payment_auto_flag',
'payment_auto_flag', 'nation_desc', 'ind'))
catVars <- vars[sapply(train[,vars],class) %in%
c('factor','character')]
numericVars <- vars[sapply(train[,vars],class) %in%
c('numeric','integer')]
# some variables are highly correlated,
# for example, module_cp, cum_gpa, cum_credits etc.
#########################################################3
# explore one-variable model
mkPredC <- function(outCol,varCol,appCol) {
pPos <- sum(outCol==pos)/length(outCol)
vTab <- table(as.factor(outCol),varCol)
pPosWv <- (vTab[pos,]+1.0e-3*pPos)/(colSums(vTab)+1.0e-3)
pred <- pPosWv[appCol]
pred[is.na(pred)] <- pPos
pred
}
mkPredN <- function(outCol,varCol,appCol) {
cuts <- unique(as.numeric(quantile(varCol,
probs=seq(0, 1, 0.1),na.rm=T)))
#move the lowest bound to the left a bit
#otherwise the smallest value may not find an interval
cuts[[1]] <- cuts[[1]] - 0.1
varC <- cut(varCol,cuts)
appC <- cut(appCol,cuts)
mkPredC(outCol,varC,appC)
}
getwd()
setwd('C:/Users/alin/Documents/SelfStudy/MyLearning/PythonDS')
data <- read.table('Collection_Risk.csv', header = TRUE, sep = ',')
names(data) <- tolower(names(data))
outcome <- 'risk'
pos <- '1'
num_to_cat <- c('risk', 'in_module', 'in_future', 'in_dissertation')
for (fac in num_to_cat){
data[, fac] <- as.factor(data[, fac])
}
#utility functions to explore single feature v.s. the target
single_cat <- function(dSet, feature, target = 'risk') {
#for categorical feature
print(sum(is.na(dSet[, feature])))
tab <- table(feature = as.factor(dSet[, feature]),
target = dSet[, target])
print(tab)
print(tab[,2]/(tab[, 1] + tab[, 2] ))
}
single_num <- function(dSet, feature, target = 'risk'){
#for numerical feature
print(sum(is.na(dSet[, feature])))
print(summary(dSet[, feature]))
plot(dSet[,feature] ~ dSet[, target])
print(summary(dSet[dSet[, target]  != pos, feature]))
print(summary(dSet[dSet[, target]  == pos, feature]))
}
# use July, August and Sept for training, Oct for testing
train <- data[data$ind <= 9, ]
test <- data[data$ind == 10, ]
#0 target
table(train[, outcome])
#reasonable balanced
#1 future
single_num(train, 'future')
ggplot(train) + geom_density(aes(x=future))
#no NA.
#nearly 50% < 10, also significant around 1100
# and it seems to suggest that people with certain future balance
# are more likely to pay? makes sense?
#2 aging
# step increase by 30 days
single_num(train, 'aging')
single_cat(train, 'aging')
# no NA.
# clearly longer aging --> higher risk
#3 program
single_cat(train, 'program')
#no NA
# the risk somewhat varies by programs,
#4 degree
single_cat(train, 'degree')
#no NA
# no significant difference across degrees,
# MA has  somewhat less risk rate
#5 college
single_cat(train, 'college')
# no NA
# There is some observable difference across colleges
#6 bb_activity_latest
single_num(train, 'bb_activity_latest')
ggplot(data=train) +
geom_density(aes(x = bb_activity_latest,
color = risk,
linetype = risk ))
# agrees with intuition, people with recent activities are less risky
# could be a good factor
#7 bb_gip_etc_ratio_std
single_num(train, 'bb_gip_etc_ratio_std')
# 1975 missing value, quite a lot, nearly 25%,
# will not use unless really necessary
#8 cum_gpa
single_num(train, 'cum_gpa')
ggplot(data=train) +
geom_density(aes(x = cum_gpa,
color = risk,
linetype = risk ))
#no NA
# risky students generally have lower gpa
#9 cum_credits
single_num(train, 'cum_credits')
#no NA, agrees with intuition, more credits --> less risky
#10. ba_credits_passed_prior1yr
single_num(train, 'ba_credits_passed_prior1yr')
ggplot(data=train) +
geom_density(aes(x = ba_credits_passed_prior1yr,
color = risk,
linetype = risk ))
#no NA, reasonable range
# more credits --> less risky
#11 ba_age
single_num(train, 'ba_age')
summary(train$ba_age)
# 3 NA's,  some wrong data: age = 121, or 0?
# seems not very useful, will not consider in 1st round
#12 gender
single_cat(train, 'gender')
# 3 blank, 16 Unknown
# set blank to unknown
train[train$gender == '', 'gender'] = 'N'
train$gender <- droplevels(train$gender)
# very few N, keeping them in case N appears in the test data
# might be marginally useful, but case N has too few instances.
#13 cp_prior3mon_pay_cnt
# directly derived from cp_prior3mon_pay_total
single_num(train, 'cp_prior3mon_pay_cnt')
single_cat(train, 'cp_prior3mon_pay_cnt')
# it seems that the big difference is whether it's 0 or >0,
# probably cp_prior3mon_pay_total is sufficient
#14 cp_prior3mon_pay_total
single_num(train, 'cp_prior3mon_pay_total')
# 1 negative -814.8, error? will remove this row
# 1 big positive > 2700 = 6717, outlier? will remove this row
train <- train[train$cp_prior3mon_pay_total >= 0 &
train$cp_prior3mon_pay_total < 2700, ]
single_num(train, 'cp_prior3mon_pay_total')
ggplot(data=train) +
geom_density(aes(x = cp_prior3mon_pay_total,
color = risk,
linetype = risk ))
# more payment --> less risky
#15 payment_auto_flag
# useless
#16 risk
#17 nation_desc
# 160 levels with many low count,
# will not consider in 1st round
a <- levels(train$nation_desc)
lowNation <- c('')
for(i in 1:length(a)){
if (sum(train$nation_desc == a[i]) <= 50){
lowNation <- c(lowNation, a[i])
}
}
train$nation_tr <- as.character(train$nation_desc)
train[train$nation_tr %in% lowNation, ]$nation_tr <- 'Other'
train$nation_tr <- as.factor(train$nation_tr)
train$nation_tr <- droplevels(train$nation_tr)
single_cat(train, 'nation_tr')
#18 current_balance
single_num(train, 'current_balance')
ggplot(data=train) +
geom_density(aes(x = current_balance,
color = risk,
linetype = risk ))
# less balance -> less risky
#19 module_cp
single_num(train, 'module_cp')
# no NA, generally more module, less risky
#20 in_module
single_cat(train, 'in_module')
# people in module are significantly less risky
#21 in_future
single_cat(train, 'in_future')
# people who have registered a future module
# are significantly less risky
#22 in_dissertation
single_cat(train, 'in_dissertation')
# people who are in a dissertation module are less risky,
# but few people are in such modules
#23 day_since_end
single_num(train, 'day_since_end')
ggplot(data=train) +
geom_density(aes(x = day_since_end,
color = risk,
linetype = risk ))
# no clear significant difference
#24 day_since_begin
single_num(train, 'day_since_begin')
# correlated with in_module
#25 day_to_begin
single_num(train, 'day_to_begin')
# likely correlated with in_future
#####################################################
vars <- setdiff(names(train), c('student_id', 'risk','bb_gip_etc_ratio_std',
'cp_prior3mon_pay_cnt', 'payment_auto_flag',
'payment_auto_flag', 'nation_desc', 'ind'))
catVars <- vars[sapply(train[,vars],class) %in%
c('factor','character')]
numericVars <- vars[sapply(train[,vars],class) %in%
c('numeric','integer')]
# some variables are highly correlated,
# for example, module_cp, cum_gpa, cum_credits etc.
#########################################################3
# explore one-variable model
mkPredC <- function(outCol,varCol,appCol) {
pPos <- sum(outCol==pos)/length(outCol)
vTab <- table(as.factor(outCol),varCol)
pPosWv <- (vTab[pos,]+1.0e-3*pPos)/(colSums(vTab)+1.0e-3)
pred <- pPosWv[appCol]
pred[is.na(pred)] <- pPos
pred
}
mkPredN <- function(outCol,varCol,appCol) {
cuts <- unique(as.numeric(quantile(varCol,
probs=seq(0, 1, 0.1),na.rm=T)))
#move the lowest bound to the left a bit
#otherwise the smallest value may not find an interval
cuts[[1]] <- cuts[[1]] - 0.1
varC <- cut(varCol,cuts)
appC <- cut(appCol,cuts)
mkPredC(outCol,varC,appC)
}
nrow(train)
summary(train$future)
myfuture <- mkPredN(train$risk, train$future, test$future)
length(myfuture)
summary(myfuture)
myfuture[1:8]
table(myfuture)
39.099/0.062
39.099/0.01
options(scipens=15)
require(stats)
intercept         <-  19.099
p_elast           <-  -0.031
o_elast           <-   0.026
program_intercept <- 20
rev_fn <- function(args){
quantity <- intercept + (p_elast*args[1]) + (o_elast*args[2]) + program_intercept
price    <- args[1]-args[2]   # charges - offer amount
revenue  <- price*quantity
return(revenue)
}
gr <- function(args){
c(p_elast * (args[1] - args[2]) + (intercept + program_intercept +
(p_elast * args[1]) + (o_elast * args[2])),
o_elast * (args[1] - args[2]) - (intercept + program_intercept +
(p_elast * args[1]) + (o_elast * args[2]))
)
}
constraint_matrix     <- matrix(c(1,0,1,-1,0,1,-1,0),ncol=2)
constraint_matrix
constraint_vector     <- c(0,0,0,-10000)
constrOptim(theta   = c(args[1], # gross price
args[2]  # offer amount
),
f       = rev_fn,
grad    = gr,
ui      = constraint_matrix,  # constraint matrix (k x p)
ci      = constraint_vector,  # constraint vector of length k
control = list(fnscale = -1), # maximization
outer.iterations = 200
)
args[1]
args[1]
?constrOptim
args <- c(3553.13, 727.48)
constrOptim(theta   = c(args[1], # gross price
args[2]  # offer amount
),
f       = rev_fn,
grad    = gr,
ui      = constraint_matrix,  # constraint matrix (k x p)
ci      = constraint_vector,  # constraint vector of length k
control = list(fnscale = -1), # maximization
outer.iterations = 200
)
39.099/0.062
39.099*39.099/(0.04*26)
1469.934*(1 - 5/31)
q()
