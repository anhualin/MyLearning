dat$Region <- NULL
dat$Country <- NULL
dat$Total_posts <- NULL
dat$Turnitin <- NULL
dat$Forum_W2 <- NULL
dat$Paid <- NULL
dat$pay_plan <- ifelse(dat$pay_plan == 'Module/Pay As You Go', 1, 0)
dat$africa <- ifelse(dat$region == 'AFRICA', 1, 0)
dat$asia <- ifelse(dat$region == 'ASIA', 1, 0)
dat$europe <- ifelse(dat$region == 'EUROPE', 1, 0)
dat$america <- ifelse(dat$region == 'NORTH AMERICA', 1, 0)
dat$other_region <- ifelse((dat$region == 'LATIN AMERICA')|
(dat$region == 'MIDDLE EAST'), 1, 0 )
dat$region <- NULL
library(tableone)
library(Matching)
xvars <- c('prog', 'balance', 'honesty', 'pay_plan', 'assignment',
'forum', 'africa', 'asia', 'europe', 'america', 'other_region')
table1 <- CreateTableOne(vars = xvars, strata = 'tc', data = dat, test = FALSE)
print(table1, smd = TRUE)
table(dat$tc, dat$prog)
num_ctl <- table(dat$tc)[1]
num_trt <- table(dat$tc)[2]
dat[dat$tc == 0, 'prog'] <- rbinom(num_ctl, 1, 0.65)
dat[dat$tc == 1, 'prog'] <- rbinom(num_trt, 1, 0.52)
dat$balance <- ifelse(dat$balance > 0, 1, 0)
dat[is.na(dat1$balance), 'balance'] <- 0
dat[dat$tc == 0, 'balance'] <- rbinom(num_ctl, 1, 0.25)
dat[dat$tc == 0, 'pay_plan'] <- rbinom(num_ctl, 1, 0.52)
dat[dat$tc == 1, 'forum'] <- dat[dat$tc == 1, 'forum'] + rbinom(num_trt, 5, 0.8)
dat[dat$tc == 1, 'asia'] <- rbinom(num_trt, 1, 0.25)
dat[dat$aisa == 1, 'africa'] <- 0
dat[dat$aisa == 1, 'america'] <- 0
dat[dat$aisa == 1, 'europe'] <- 0
dat[dat$aisa == 1, 'other_region'] <- 0
table1 <- CreateTableOne(vars = xvars, strata = 'tc', data = dat, test = FALSE)
print(table1, smd = TRUE)
psmodel <- glm(tc ~ prog + balance + honesty + pay_plan
+ assignment + forum + africa + asia
+ europe + america + other_region,
family = binomial(), data = dat)
dat$ps <- psmodel$fitted.values
psmatch <- Match(Tr = dat$tc, M = 1, X = dat$ps, replace = FALSE)
matched1 <- dat[unlist(psmatch[c('index.treated', 'index.control')]), ]
matchedtab1 <-  CreateTableOne(vars = xvars, strata = 'tc', data = matched1, test = FALSE)
print(matchedtab1, smd = TRUE)
print(table1, smd = TRUE)
print(matchedtab1, smd = TRUE)
greedymatch<-Match(Tr=dat$tc, M=1,X=dat[xvars],replace=FALSE)
matched2<-mydata[unlist(greedymatch[c("index.treated","index.control")]), ]
matched2<-dat[unlist(greedymatch[c("index.treated","index.control")]), ]
matchedtab2<-CreateTableOne(vars=xvars, strata ="tc",
data=matched2, test = FALSE)
print(matchedtab2, smd = TRUE)
print(matchedtab1, smd = TRUE)
logit <- function(p) {log(p)-log(1-p)}
psmatch3<-Match(Tr=dat$tc, M=1,X=logit(dat$ps),replace=FALSE,caliper=.2)
matched3<-dat[unlist(psmatch3[c("index.treated","index.control")]), ]
#get standardized differences
matchedtab3<-CreateTableOne(vars=xvars, strata ="tc",
data=matched3, test = FALSE)
print(matchedtab3, smd = TRUE)
logit <- function(p) {log(p)-log(1-p)}
psmatch3<-Match(Tr=dat$tc, M=1,X=logit(dat$ps),replace=FALSE,caliper=.1)
matched3<-dat[unlist(psmatch3[c("index.treated","index.control")]), ]
#get standardized differences
matchedtab3<-CreateTableOne(vars=xvars, strata ="tc",
data=matched3, test = FALSE)
print(matchedtab3, smd = TRUE)
logit <- function(p) {log(p)-log(1-p)}
psmatch3<-Match(Tr=dat$tc, M=1,X=logit(dat$ps),replace=FALSE,caliper=.5)
matched3<-dat[unlist(psmatch3[c("index.treated","index.control")]), ]
#get standardized differences
matchedtab3<-CreateTableOne(vars=xvars, strata ="tc",
data=matched3, test = FALSE)
print(matchedtab3, smd = TRUE)
logit <- function(p) {log(p)-log(1-p)}
psmatch3<-Match(Tr=dat$tc, M=1,X=logit(dat$ps),replace=FALSE,caliper=.8)
matched3<-dat[unlist(psmatch3[c("index.treated","index.control")]), ]
#get standardized differences
matchedtab3<-CreateTableOne(vars=xvars, strata ="tc",
data=matched3, test = FALSE)
print(matchedtab3, smd = TRUE)
logit <- function(p) {log(p)-log(1-p)}
psmatch3<-Match(Tr=dat$tc, M=1,X=logit(dat$ps),replace=FALSE,caliper=2)
matched3<-dat[unlist(psmatch3[c("index.treated","index.control")]), ]
#get standardized differences
matchedtab3<-CreateTableOne(vars=xvars, strata ="tc",
data=matched3, test = FALSE)
print(matchedtab3, smd = TRUE)
print(matchedtab1, smd = TRUE)
logit <- function(p) {log(p)-log(1-p)}
psmatch3<-Match(Tr=dat$tc, M=1,X=logit(dat$ps),replace=FALSE,caliper= 1.5)
matched3<-dat[unlist(psmatch3[c("index.treated","index.control")]), ]
#get standardized differences
matchedtab3<-CreateTableOne(vars=xvars, strata ="tc",
data=matched3, test = FALSE)
print(matchedtab3, smd = TRUE)
q()
install.packages("ggthemes")
q()
q()
require(ggplot2)
require(ROCR)
require(dplyr)
data <- read.csv(file = 'C:\\Users\\alin\\Documents\\Data\\FDA2018\\Collection_Risk.csv')
names(data) <- tolower(names(data))
data$id <- seq(1, nrow(data))
data$student_id <- NULL
outcome <- 'risk'
pos <- '1'
data$risk_n <- data$risk
data$risk <- as.factor(data$risk)
train <- data[data$ind <= 10, ]
test <- data[data$ind == 11, ]
num_to_cat <- c('risk', 'in_module', 'in_future', 'in_dissertation')
for (fac in num_to_cat){
data[, fac] <- as.factor(data[, fac])
}
#utility functions to explore single feature v.s. the target
single_cat <- function(dSet, feature, target = 'risk') {
#for categorical feature
print(sum(is.na(dSet[, feature])))
tab <- table(feature = as.factor(dSet[, feature]),
target = dSet[, target])
print(tab)
print(tab[,2]/(tab[, 1] + tab[, 2] ))
}
single_num <- function(dSet, feature, target = 'risk'){
#for numerical feature
print(sum(is.na(dSet[, feature])))
print(summary(dSet[, feature]))
plot(dSet[,feature] ~ dSet[, target])
print(summary(dSet[dSet[, target]  != pos, feature]))
print(summary(dSet[dSet[, target]  == pos, feature]))
}
single_cat(train, 'college')
ggplot(data=train) +
geom_density(aes(x = bb_activity_latest,
color = risk,
linetype = risk ))
summary(train$bb_gip_etc_ratio_std)
ggplot(data=train) +
geom_density(aes(x = cum_gpa,
color = risk,
linetype = risk ))
vars <- setdiff(names(train), c('student_id', 'risk','bb_gip_etc_ratio_std',
'cp_prior3mon_pay_cnt', 'payment_auto_flag',
'payment_auto_flag', 'ind',
'nation_desc', 'id', 'risk_n'))
catVars <- vars[sapply(train[,vars],class) %in%
c('factor','character')]
numericVars <- vars[sapply(train[,vars],class) %in%
c('numeric','integer')]
train0 <- train[train$ind <= 9, ]
valid0 <- train[train$ind == 10, ]
mkPredC <- function(outCol,varCol,appCol) {
pPos <- sum(outCol==pos)/length(outCol)
vTab <- table(as.factor(outCol),varCol)
pPosWv <- (vTab[pos,]+1.0e-3*pPos)/(colSums(vTab)+1.0e-3)
pred <- pPosWv[appCol]
pred[is.na(pred)] <- pPos
pred
}
mkPredN <- function(outCol,varCol,appCol) {
cuts <- unique(as.numeric(quantile(varCol,
probs=seq(0, 1, 0.1),na.rm=T)))
cuts[[1]] <- cuts[[1]] - 0.1
varC <- cut(varCol,cuts)
appC <- cut(appCol,cuts)
mkPredC(outCol,varC,appC)
}
calcAUC <- function(predcol,outcol) {
#calculated auc
perf <- performance(prediction(predcol,outcol==pos),'auc')
as.numeric(perf@y.values)
}
train0_num_sd <- scale(train0[, numericVars])
means <- attr(train0_num_sd, "scaled:center")
stds <- attr(train0_num_sd, "scaled:scale")
train0[, numericVars] <- data.frame(train0_num_sd)
# use the same mean/std to transform valid0
valid0_num <- valid0[, numericVars]
valid0_num <- t(apply(valid0_num, 1, '-', means))
valid0_num <- t(apply(valid0_num, 1, '/', stds))
valid0[, numericVars] <- data.frame(valid0_num)
for(v in numericVars) {
pi <- paste('pred',v,sep='')
train0[,pi] <- mkPredN(train0[,outcome],train0[,v],train0[,v])
valid0[,pi] <- mkPredN(train0[,outcome],train0[,v],valid0[,v])
aucTrain <- calcAUC(train0[,pi],train0[,outcome])
aucCal <- calcAUC(valid0[,pi], valid0[,outcome])
print(sprintf("%s, trainAUC: %4.3f calibrationAUC: %4.3f",
pi,aucTrain,aucCal))
}
for(v in catVars) {
pi <- paste('pred',v,sep='')
train0[,pi] <- mkPredC(train0[,outcome],train0[,v],train0[,v])
valid0[,pi] <- mkPredC(train0[,outcome],train0[,v],valid0[,v])
aucTrain <- calcAUC(train0[,pi], train0[,outcome])
aucCal <- calcAUC(valid0[,pi], valid0[,outcome])
print(sprintf("%s, trainAUC: %4.3f calibrationAUC: %4.3f",
pi,aucTrain,aucCal))
}
v <- 'program'
pi <- paste('pred',v,sep='')
# train0[,pi] <- mkPredC(train0[,outcome],train0[,v],train0[,v])
# valid0[,pi] <- mkPredC(train0[,outcome],train0[,v],valid0[,v])
# aucTrain <- calcAUC(train0[,pi], train0[,outcome])
# aucCal <- calcAUC(valid0[,pi], valid0[,outcome])
eval <- prediction(train0[,pi], train0[, outcome])
plot(performance(eval,"tpr","fpr"))
print(attributes(performance(eval,'auc'))$y.values[[1]])
eval <- prediction(valid0[,pi], valid0[, outcome])
plot(performance(eval,"tpr","fpr"))
print(attributes(performance(eval,'auc'))$y.values[[1]])
v <- 'ba_credits_passed_prior1yr'
pi <- paste('pred',v,sep='')
# train0[,pi] <- mkPredC(train0[,outcome],train0[,v],train0[,v])
# valid0[,pi] <- mkPredC(train0[,outcome],train0[,v],valid0[,v])
# aucTrain <- calcAUC(train0[,pi], train0[,outcome])
# aucCal <- calcAUC(valid0[,pi], valid0[,outcome])
eval <- prediction(valid0[,pi], valid0[, outcome])
plot(performance(eval,"tpr","fpr"))
print(attributes(performance(eval,'auc'))$y.values[[1]])
logLikelyhood <- function(outCol,predCol) {
sum(ifelse(outCol==pos,log(predCol),log(1-predCol)))
}
selVars <- c()
scores <- c()
baseRateCheck <- logLikelyhood(
valid0[,outcome],
sum(valid0[,outcome]==pos)/length(valid0[,outcome]))
print(baseRateCheck)
for(v in catVars) {
pi <- paste('pred',v,sep='')
liCheck <- 2*((logLikelyhood(valid0[,outcome],valid0[,pi]) -
baseRateCheck))
print(sprintf("%s, calibrationScore: %g", pi,liCheck))
selVars <- c(selVars,v)
scores <- c(scores, liCheck)
}
for(v in numericVars) {
pi <- paste('pred',v,sep='')
liCheck <- 2*((logLikelyhood(valid0[,outcome],valid0[,pi]) -
baseRateCheck) - 1)
print(sprintf("%s, calibrationScore: %g", pi,liCheck))
selVars <- c(selVars,v)
scores <- c(scores, liCheck)
}
varScore <- data.frame(var = selVars, score = scores)
varScore <- varScore[with(varScore, order(-score)),]
varScore
summary(train$bb_gip_etc_ratio_std)
setwd("C:\\Users\\alin\\Documents\\SelfStudy\\MyLearning\\FDA2018")
library('ReporteRs')
library(flextable)
system("java -version")
options('ReporteRs-fontsize'= 18, 'ReporteRs-default-font'='Arial')
#doc <- pptx(template="r-reporters-powerpoint-template.pptx" )
doc <- pptx(template = 'facet.pptx')
# Slide 4: Case Study 2
# +++++++++++++++++++++
doc <- addSlide(doc, "Title and Content")
doc <- addTitle(doc, "Case Study II")
doc  <- addParagraph(doc,
value = c('Context',
'Request'
),
par.properties = parProperties(list.style = 'ordered', level = 1)
)
# Slide: Data
# +++++++++++
doc <- addSlide(doc, "Title and Content")
doc <- addTitle(doc, "Data")
doc  <- addParagraph(doc,
value = c('10679 records in total',
'Target variable: risk',
'26 raw features',
'Randomly split into 70% train and 30% test'
),
par.properties = parProperties(list.style = 'ordered', level = 1)
)
# Slide: Data
# +++++++++++++++++++++
doc <- addSlide(doc, "Title and Content")
doc <- addTitle(doc, "Data")
dtab <- vanilla.table(train[1:10,c('id','risk', 'gender', 'ba_age', 'program','degree',  'cum_gpa')])
dtab <- setZebraStyle(dtab, odd = '#eeeeee', even = 'white')
#dtab <-  bg(dtab, bg = "#E4C994", part = "header")
#dtab <- align(dtab, align = "center", part = "all" )
doc <- addFlexTable(doc, dtab)
# Slide: Data
# +++++++++++++++++++++
doc <- addSlide(doc, "Title and Content")
doc <- addTitle(doc, "Data")
dtab <- vanilla.table(train[1:10,c('id', 'current_balance', 'in_dissertation', 'in_future')])
dtab <- setZebraStyle(dtab, odd = '#eeeeee', even = 'white')
#dtab <-  bg(dtab, bg = "#E4C994", part = "header")
#dtab <- align(dtab, align = "center", part = "all" )
doc <- addFlexTable(doc, dtab)
doc <- addSlide(doc, "Title and Content")
doc <- addTitle(doc, "EDA (GPA): Double Density Plot")
doc <- addPlot(doc, function() print(ggplot(data=train) +
geom_density(aes(x = cum_gpa,
color = risk,
linetype = risk))))
doc <- addSlide(doc, "Two Content")
doc <- addTitle(doc, "EDA Example")
raw_text <- capture.output(summary(train$bb_gip_etc_ratio_std))
my_text <- pot(trimws(paste(raw_text, collapse = '\n')))
doc <- addParagraph(doc, value = set_of_paragraphs(my_text),
par.properties=parProperties(text.align="justify"))
r_code0 <- "summary(train$bb_gip_etc_ratio_std"
doc <- addRScript(doc, text=r_code0)
# Slide: Data
# +++++++++++
doc <- addSlide(doc, "Title and Content")
doc <- addTitle(doc, "Feature Selection")
doc  <- addParagraph(doc,
value = c('Domain knowledge',
'AUC of single variable model',
'AIC based on index on single variable model',
'Other approaches',
'No guarantee, trial and error'
),
par.properties = parProperties(list.style = 'ordered', level = 1)
)
doc <- addSlide(doc, "Title and Content")
doc <- addTitle(doc, "AUC (Program)")
doc <- addPlot(doc, function(){
eval <- prediction(valid0[,'predprogram'], valid0[, outcome])
plot(performance(eval,"tpr","fpr"))
print(attributes(performance(eval,'auc'))$y.values[[1]])
}
)
doc <- addSlide(doc, "Title and Content")
doc <- addTitle(doc, "AUC (Credits)")
doc <- addPlot(doc, function(){
eval <- prediction(valid0[,'predba_credits_passed_prior1yr'], valid0[, outcome])
plot(performance(eval,"tpr","fpr"))
print(attributes(performance(eval,'auc'))$y.values[[1]])
}
)
# Slide: Models
# +++++++++++
doc <- addSlide(doc, "Two Content")
doc <- addTitle(doc, "Statistical Learning Models")
doc  <- addParagraph(doc,
value = c('Logistic Regression',
'Random Forest',
'Extra Trees',
'Gradient Boosting',
'Neural Network',
'Ensembling and Stacking',
'...'
),
par.properties = parProperties(list.style = 'ordered', level = 1)
)
doc <- addImage(doc, "C:\\Users\\alin\\Documents\\Data\\FDA2018\\ESL.jpeg")
# Slide: Data
# +++++++++++
doc <- addSlide(doc, "Title and Content")
doc <- addTitle(doc, "Model Selection and Parameter Tuning")
doc  <- addParagraph(doc,
value = c('Cross Validation',
'Grid Search'
),
par.properties = parProperties(list.style = 'ordered', level = 1)
)
doc <- addSlide(doc, "Title and Content")
doc <- addTitle(doc, "Model Performance")
doc <- addSlide(doc, "Title and Content")
doc <- addTitle(doc, "Model Performance")
writeDoc(doc, "FDA_Presentation2.pptx" )
setwd("C:\\Users\\alin\\Documents\\SelfStudy\\MyLearning\\FDA2018")
library('ReporteRs')
library(flextable)
system("java -version")
options('ReporteRs-fontsize'= 18, 'ReporteRs-default-font'='Arial')
#doc <- pptx(template="r-reporters-powerpoint-template.pptx" )
doc <- pptx(template = 'facet.pptx')
# Slide 4: Case Study 2
# +++++++++++++++++++++
doc <- addSlide(doc, "Title and Content")
doc <- addTitle(doc, "Case Study II")
doc  <- addParagraph(doc,
value = c('Context',
'Request'
),
par.properties = parProperties(list.style = 'ordered', level = 1)
)
# Slide: Data
# +++++++++++
doc <- addSlide(doc, "Title and Content")
doc <- addTitle(doc, "Data")
doc  <- addParagraph(doc,
value = c('10679 records in total',
'Target variable: risk',
'26 raw features',
'Randomly split into 70% train and 30% test'
),
par.properties = parProperties(list.style = 'ordered', level = 1)
)
# Slide: Data
# +++++++++++++++++++++
doc <- addSlide(doc, "Title and Content")
doc <- addTitle(doc, "Data")
dtab <- vanilla.table(train[1:10,c('id','risk', 'gender', 'ba_age', 'program','degree',  'cum_gpa')])
dtab <- setZebraStyle(dtab, odd = '#eeeeee', even = 'white')
#dtab <-  bg(dtab, bg = "#E4C994", part = "header")
#dtab <- align(dtab, align = "center", part = "all" )
doc <- addFlexTable(doc, dtab)
# Slide: Data
# +++++++++++++++++++++
doc <- addSlide(doc, "Title and Content")
doc <- addTitle(doc, "Data")
dtab <- vanilla.table(train[1:10,c('id', 'current_balance', 'in_dissertation', 'in_future')])
dtab <- setZebraStyle(dtab, odd = '#eeeeee', even = 'white')
#dtab <-  bg(dtab, bg = "#E4C994", part = "header")
#dtab <- align(dtab, align = "center", part = "all" )
doc <- addFlexTable(doc, dtab)
doc <- addSlide(doc, "Title and Content")
doc <- addTitle(doc, "EDA (GPA): Double Density Plot")
doc <- addPlot(doc, function() print(ggplot(data=train) +
geom_density(aes(x = cum_gpa,
color = risk,
linetype = risk))))
doc <- addSlide(doc, "Two Content")
doc <- addTitle(doc, "EDA Example")
raw_text <- capture.output(summary(train$bb_gip_etc_ratio_std))
my_text <- pot(trimws(paste(raw_text, collapse = '\n')))
doc <- addParagraph(doc, value = set_of_paragraphs(my_text),
par.properties=parProperties(text.align="justify"))
r_code0 <- "summary(train$bb_gip_etc_ratio_std)"
doc <- addRScript(doc, text=r_code0)
# Slide: Data
# +++++++++++
doc <- addSlide(doc, "Title and Content")
doc <- addTitle(doc, "Feature Selection")
doc  <- addParagraph(doc,
value = c('Domain knowledge',
'AUC of single variable model',
'AIC based on index on single variable model',
'Other approaches',
'No guarantee, trial and error'
),
par.properties = parProperties(list.style = 'ordered', level = 1)
)
doc <- addSlide(doc, "Title and Content")
doc <- addTitle(doc, "AUC (Program)")
doc <- addPlot(doc, function(){
eval <- prediction(valid0[,'predprogram'], valid0[, outcome])
plot(performance(eval,"tpr","fpr"))
print(attributes(performance(eval,'auc'))$y.values[[1]])
}
)
doc <- addSlide(doc, "Title and Content")
doc <- addTitle(doc, "AUC (Credits)")
doc <- addPlot(doc, function(){
eval <- prediction(valid0[,'predba_credits_passed_prior1yr'], valid0[, outcome])
plot(performance(eval,"tpr","fpr"))
print(attributes(performance(eval,'auc'))$y.values[[1]])
}
)
# Slide: Models
# +++++++++++
doc <- addSlide(doc, "Two Content")
doc <- addTitle(doc, "Statistical Learning Models")
doc  <- addParagraph(doc,
value = c('Logistic Regression',
'Random Forest',
'Extra Trees',
'Gradient Boosting',
'Neural Network',
'Ensembling and Stacking',
'...'
),
par.properties = parProperties(list.style = 'ordered', level = 1)
)
doc <- addImage(doc, "C:\\Users\\alin\\Documents\\Data\\FDA2018\\ESL.jpeg")
# Slide: Data
# +++++++++++
doc <- addSlide(doc, "Title and Content")
doc <- addTitle(doc, "Model Selection and Parameter Tuning")
doc  <- addParagraph(doc,
value = c('Cross Validation',
'Grid Search'
),
par.properties = parProperties(list.style = 'ordered', level = 1)
)
doc <- addSlide(doc, "Title and Content")
doc <- addTitle(doc, "Model Performance")
doc <- addSlide(doc, "Title and Content")
doc <- addTitle(doc, "Model Performance")
writeDoc(doc, "FDA_Presentation2.pptx" )
str(train)
catVars
v <- 'degree'
mkPredC(train0[,outcome],train0[,v],train0[,v])
outCol <- train0[, outcome]
varCol <- train0[, v]
appCol <- train0[, v]
pPos <- sum(outCol==pos)/length(outCol)
pPos
table(outCol)
4324/length(outCol)
vTab <- table(as.factor(outCol),varCol)
vTab
pPosWv <- (vTab[pos,]+1.0e-3*pPos)/(colSums(vTab)+1.0e-3)
pPosWv
q()
