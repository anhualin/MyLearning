names(data)
packages <- c("jsonlite", "dplyr", "purrr", "tidytext", "ggplot2", "lubridate", "tidyr",
"stringr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
?left_join
df <- data_frame(id = c(1,2,3,4,5), a = c(1,2,3,4,5))
df1 <- data_frame(id = c(1,2,3), b = c(1,2,3))
df2 <- data_frame(id = c(3,4,5), x = c('a','b','c'))
x <-df %>%
left_join(df1) %>%
left_join(df2)
x
if (Sys.info()[1] == 'Windows'){
setwd('C:/Users/alin/Documents/SelfStudy/MyLearning/Kaggle/TwoSigma/data')
}else{
setwd('/home/alin/MyLearning/Kaggle/TwoSigma/data')
}
data <- fromJSON("train.json")
# unlist every variable except `photos` and `features` and convert to tibble
vars <- setdiff(names(data), c("photos", "features"))
#library(tibble)?
#library(purrr)
train_df <- map_at(data, vars, unlist) %>%
tibble::as_tibble(.) %>%
mutate(interest_level = factor(interest_level, c("low", "medium", "high")))
a <- unique(train_df$manager_id)
length()
length(a)
a
names(train_df)
a <- train_df$display_address
a[1:10]
a <- train_df$latitude
length(a)
a[1:10]
summary(a)
b <- train_df$longitude
summary(b)
plot(a,b)
summary(a[a<40])
a[a<40]
a[a>41]
b[b<73]
summary(b)
b[b<-73]
b[b< -110]
b
b <- train_df$longitude
summary(b)
b[b <  -73]
summary(b)
b[b <  -74]
b[b <  -75]
summary(a)
summary(b)
a[ a < 40]
a[ a < 40.73]
a[ a < 40.6]
a[ a < 40]
summary(a)
a[a > 41]
summary(b)
b[ b < -74]
b[ b < -75]
a[ a < 40]
a[a > 41]
a <- train_df$latitude
summary(a)
x <- a[ a > 39 & a <40]
x
summary(b)
x <- b[b < -74]
x
x <- b[b < -75]
x
summary(b)
x <- b[b > -73]
x
raw_train <- fromJSON("train.json")
raw_test <- fromJSON("test.json")
names(raw_train)
names(raw_test)
length(raw_train)
nrow(raw_train)
df
x
df <- data_frame(id = c(1,2,3,4,5), a = c(1,2,3,4,5))
df1 <- data_frame(id = c(1,2,3), b = c(1,2,3))
df2 <- data_frame(id = c(3,4,5), x = c('a','b','c'))
x <-df %>%
left_join(df1) %>%
left_join(df2)
x
x %>%
select(-c(a,x))
x %>%
select(-c('a','x'))
names(train_df)
vars <- setdiff(names(data), c("photos", "features"))
train_df <- map_at(data, vars, unlist) %>%
tibble::as_tibble(.) %>%
mutate(interest_level = factor(interest_level, c("low", "medium", "high"))) %>%
select(-c(building_id, display_address, manager_id, photos, street_address))
train_df
train_df <- map_at(data, vars, unlist) %>%
tibble::as_tibble(.) %>%
mutate(interest_level = factor(interest_level, c("low", "medium", "high"))) %>%
select(-c(building_id, display_address, manager_id, photos, street_address)) %>%
mutate(cat = 'train')
table(train_df$cat)
names(train_df)
test_df <- map_at(raw_test, vars, unlist) %>%
tibble::as_tibble(.) %>%
select(-c(building_id, display_address, manager_id, photos, street_address)) %>%
mutate(cat = 'test')
table(test_df$cat)
data_df <- rbind(train_df, test_df)
test_df <- map_at(raw_test, vars, unlist) %>%
tibble::as_tibble(.) %>%
select(-c(building_id, display_address, manager_id, photos, street_address)) %>%
mutate(cat = 'test', interest_level = NA)
data_df <- rbind(train_df, test_df)
table(data_df$cat)
table(data_df$interest_level)
?table
table(data_df$interest_level, useNA = 'ifany')
names(data_df)
data_df$year <- year(data_df$created)
data_df$month <- month(data_df$created)
data_df$day <- day(data_df$created)
unique(data_df$year)
unique(data_df$month)
data_df$ten_day <- unlist(map(data_df$day, day_by_10))
day_by_10 <- function(day){
floor((min(30, day) - 1) / 10)
}
data_df$ten_day <- unlist(map(data_df$day, day_by_10))
table(data_df$ten_day)
table(data_df$ten_day, useNA = 'ifany')
dejunk <- function(a){
a <- gsub('<a\\s+website_redacted', '',a)
a <- gsub('<\\S+\\s*/*>', ' ', a)
a <- gsub('\\S+\\s*@\\s*\\S+', ' ', a)
a <- gsub('\\d+[-]*\\d+[-]\\d+', ' ', a)
a <- gsub('\\W+', ' ', a)
a <- gsub('[[:digit:]]', ' ', a)
}
raw_description <- data_df %>%
select(listing_id, description) %>%
mutate(description = dejunk(description))
raw_description
raw_description[1, 'description']
raw_description[1, 'description'][[1]]
tidy_description <- raw_description %>%
unnest_tokens(word, description) %>%
anti_join(stop_words)
tidy_description
a <- raw_description[raw_description$listing_id == 6857035, 'description'][[1]]
a
a <- data_df[data_df$listing_id == 6857035, 'description'][[1]]
a
a <- data_df[data_df$listing_id == 6883750, 'description'][[1]]
a
word_cnt <- tidy_description %>%
count(listing_id) %>%
mutate(word_cnt = n) %>%
select(listing_id, word_cnt)
senti <- tidy_description %>%
inner_join(get_sentiments("afinn")) %>%
group_by(listing_id) %>%
summarise(sentiment1 = sum(score))
senti
neg_senti <- raw_description %>%
unnest_tokens(bigram, description, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(word1 %in% negation_words) %>%
inner_join(get_sentiments("afinn"), by = c(word2 = "word")) %>%
group_by(listing_id) %>%
summarise(sentiment2 = -2*sum(score))
negation_words <- c("not", "no", "never", "without")
neg_senti <- raw_description %>%
unnest_tokens(bigram, description, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(word1 %in% negation_words) %>%
inner_join(get_sentiments("afinn"), by = c(word2 = "word")) %>%
group_by(listing_id) %>%
summarise(sentiment2 = -2*sum(score))
sentiment <- senti %>%
left_join(neg_senti)
sentiment[is.na(sentiment$sentiment2), 'sentiment2'] <- 0
sentiment <- sentiment %>%
mutate(sentiment = sentiment1 + sentiment2) %>%
select(listing_id, sentiment)
sentiment
raw_features <- data_df %>%
select(listing_id, features)
raw_features
nrow(data_df)
nrow(raw_description)
nrow(word_cnt)
head(raw_features)
raw_features$features <- apply(raw_features[,2], 1, function(l) tolower(paste(unlist(l), collapse = '|')))
raw_features[1, 'features']
feature_df <- raw_features %>%
transform(features = strsplit(features, '|', fixed = TRUE)) %>%
unnest(features) %>%
tibble::as_tibble(.)
feature_df
pet_df <- feature_df %>%
filter(str_detect(features, '(^|\\s)(pet|cat|dog)(s$|s\\s|\\s|$)' )) %>%
mutate(pet = 1 - 2* as.integer(str_detect(features, '(^|\\s)no\\s+(pet|cat|dog)'))) %>%
select(listing_id, pet) %>%
group_by(listing_id) %>%
summarise(pet = max(pet))
pet_df
laundry_df <- feature_df %>%
filter(str_detect(features, 'laundry')) %>%
mutate(laundry = 1) %>%
select(listing_id, laundry) %>%
group_by(listing_id) %>%
summarise(laundry = max(laundry))
pool_df <- feature_df %>%
filter(str_detect(features, '(\\W|^)pool(\\W|$)')) %>%
mutate(pool = 1) %>%
select(listing_id, pool) %>%
group_by(listing_id) %>%
summarise(pool = max(pool))
pool_df
fee_df <- feature_df %>%
filter(str_detect(features, '(\\W)fee(\\W|$)')) %>%
mutate(fee = 2 * as.integer(str_detect(features, '(^|\\s)no(\\W)')) - 1) %>%
select(listing_id, fee) %>%
group_by(listing_id) %>%
summarise(fee = max(fee))
table(fee_df$fee)
a <- unique(feature_df$features)
length(a)
a[100:130]
a[200:230]
a[230:280]
dishwasher_df <- feature_df %>%
filter(str_detect(features, '(\\W|^)dishwasher(\\W|$)'))
dishwasher_df
dishwasher_df <- feature_df %>%
filter(str_detect(features, '(\\W|^)dishwasher(\\W|$)')) %>%
mutate(dishwasher = 1) %>%
select(listing_id, dishwasher) %>%
group_by(listing_id) %>%
summarise(dishwasher = max(dishwasher)
)
a
a[100:150]
nrow(data_df)
table(data_df$cat)
names(data_df)
final_df <- data_df %>%
left_join(word_cnt) %>%
left_join(sentiment) %>%
left_join(pet_df) %>%
left_join(laundry_df) %>%
left_join(pool_df) %>%
left_join(fee_df) %>%
left_join(dishwasher_df)
nrow(final_df)
final_df[is.na(final_df$word_cnt), 'word_cnt'] <- 0
final_df[is.na(final_df$sentiment), 'sentiment'] <- 0
final_df[is.na(final_df$pet), 'pet'] <- 0
final_df[is.na(final_df$laundry), 'laundry'] <- 0
final_df[is.na(final_df$pool), 'pool'] <- 0
final_df[is.na(final_df$fee), 'fee'] <- 0
final_df[is.na(final_df$dishwasher), 'dishwasher'] <- 0
final_df$word_cnt <- as.factor(final_df$word_cnt)
final_df$word_cnt <- as.factor(final_df$word_cnt)
final_df$sentiment <- as.factor(final_df$sentiment)
final_df$pet <- as.factor(final_df$pet)
final_df$laundry <- as.factor(final_df$laundry)
final_df$pool <- as.factor(final_df$pool)
final_df$fee <- as.factor(final_df$fee)
final_df$dishwasher <- as.factor(final_df$dishwasher)
names(final_df)
a <- final_df$price
summary(a)
summary(a[ a > 10000])
len(a[ a > 10000])
length(a[ a > 10000])
length(a[ a > 50000])
g <- final_df %>%
filter(price > 50000) %>%
select(cat, price)
nrow(g)
g
a <- final_df[final_df$cat == 'test', 'price']
summary(a)
table(g$cat)
final_df <- final_df %>%
select(cat, listing_id, bathrooms, bedrooms, latitude, longitude,
price, month, ten_day, word_cnt, sentiment, pet, laundry,
pool, fee, dishwasher, interest_level) %>%
filter(cat == 'test' | price < 50000)
table(final_df$cat)
table(data_df$cat)
View(final_df)
View(final_df)
library(h2o)
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
if (! ("methods" %in% rownames(installed.packages()))) { install.packages("methods") }
if (! ("statmod" %in% rownames(installed.packages()))) { install.packages("statmod") }
if (! ("stats" %in% rownames(installed.packages()))) { install.packages("stats") }
if (! ("graphics" %in% rownames(installed.packages()))) { install.packages("graphics") }
if (! ("RCurl" %in% rownames(installed.packages()))) { install.packages("RCurl") }
if (! ("jsonlite" %in% rownames(installed.packages()))) { install.packages("jsonlite") }
if (! ("tools" %in% rownames(installed.packages()))) { install.packages("tools") }
if (! ("utils" %in% rownames(installed.packages()))) { install.packages("utils") }
install.packages("h2o", type="source", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/rel-ueno/5/R")))
library(h2o)
h2o.init(nthreads = -1, max_mem_size="10g")
train_df <- final_df %>%
filter(cat == 'train')
table(train_df)
nrow(train-df)
nrow(train_df)
library(caTools)
install.packages("caTools")
library(caTools)
split <- sample.split((1:nrow(train_df)), SplitRatio = 0.7)
train <- train_df[split]
split[1:10]
train <- train_df[split,]
valid <- train_df[!split, ]
nrow(train)
nrow(valid)
train
names(train)
varnames <- setdiff(names(train), c("listing_id", "cat")
features <- setdiff(varnames, 'interest_level')
train1 <- as.data.frame(train)
train.hex <- as.h2o(train1)
# varnames <- setdiff(colnames(train), "interest_level")
h2o_gbm <- h2o.gbm(x = features, y = "interest_level", train.hex, seed = 10000)
h2o_gbm <- h2o.gbm(1:5, 6, train.hex, seed = 10000)
true_interest <- test$interest_level
test1 <- as.data.frame(test)
test1$interest_level <- NULL
test.hex <- as.h2o(test1)
predH2o <- as.data.frame(h2o.predict(h2o_gbm, test.hex))
pred <- predH2o$predict
table(true_interest, pred)
varnames <- setdiff(names(train), c("listing_id", "cat")
features <- setdiff(varnames, 'interest_level')
train1 <- as.data.frame(train)
train.hex <- as.h2o(train1)
# varnames <- setdiff(colnames(train), "interest_level")
h2o_gbm <- h2o.gbm(x = features, y = "interest_level", train.hex, seed = 10000)
h2o_gbm <- h2o.gbm(1:5, 6, train.hex, seed = 10000)
true_interest <- test$interest_level
test1 <- as.data.frame(test)
test1$interest_level <- NULL
test.hex <- as.h2o(test1)
predH2o <- as.data.frame(h2o.predict(h2o_gbm, test.hex))
pred <- predH2o$predict
table(true_interest, pred)
varnames <- setdiff(names(train), c("listing_id", "cat"))
varnames
features <- setdiff(varnames, 'interest_level')
train.hex <- as.h2o(train)
h2o_gbm <- h2o.gbm(x = features, y = "interest_level", train.hex, seed = 10000)
true_interest <- valid$interest_level
valid1 <- valid %>%
select(-c('cat', 'interest_level'))
valid1 <- valid %>%
select(-interest_level)
names(valid1)
valid.hex <- as.h2o(valid1)
predH2o <- as.data.frame(h2o.predict(h2o_gbm, valid.hex))
pred <- predH2o$predict
table(true_interest, pred)
str(predH2o)
0.0595 + 0.616+0.325
nrow(valid)
valid_result1 <- cbind(valid, predH2o)
valid_result <- valid_result1 %>%
select(listing_id, interest_level, predict, high, medium, low) %>%
mutate(totalProb = high + medium + low)
valid_result
test_df <- final_df %>%
filter(cat == 'test')
names(test_df)
test_df <- final_df %>%
filter(cat == 'test') %>%
select(-c(cat, interest_level))
names(test-df)
names(test_df)
test.hex <- as.h2o(test_df)
trainAll.hex <- as.h2o(train_df)
h2o_gbm <- h2o.gbm(x = features, y = "interest_level", trainAll.hex, seed = 10000)
predH2o <- as.data.frame(h2o.predict(h2o_gbm, test.hex))
test_result1 <- cbind(test_df, predH2o)
nrow(test_result1)
table(data_df$cat)
test_result <- test_result1 %>%
select(listing_id, high, medium, low)
class(test_result)
nrow(test_result)
test_result[1;10,]
test_result[1:10,]
?write.csv
write.csv(test_result, file = 'submission1.csv', row.names = FALSE)
write.csv(test_result, file = 'submission1.csv', quote = FALSE, row.names = FALSE)
h2o_rf <- h2o.randomForest(x = features, y = "interest_level", trainAll.hex, seed = 10000)
predH2o <- as.data.frame(h2o.predict(h2o_rf, test.hex))
str(predH2o)
test_result1 <- cbind(test_df, predH2o)
test_result <- test_result1 %>%
select(listing_id, high, medium, low)
write.csv(test_result, file = 'submission2.csv', quote = FALSE, row.names = FALSE)
q()
