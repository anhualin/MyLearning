library(data.table)
DT = data.table(ID = c("b","b","b","a","a","c"), a = 1:6, b = 7:12, c = 13:18)
DT
DT[ID == 'b' & a <=2]
DT[order(-a)]
DT[,a]
is.vector(DT[,a])
DT[,list(a)]
class(DT[,list(a)])
DT[, a.()]
DT[, (a)]
DT[, .(a)]
DT[, .(a, b)]
DT[, .(a1=a, b1=b)]
Dt
Dt
DT
DT[, sum(a)]
DT[, sum(a > 3)]
DT[, a>3]
nrow(DT)
DT[ a < 3, .N]
DT[, c('a','b'), with = FALSE]
DT[, .(a,b)]
DT[, -c('a','b'), with = FALSE]
DT[, -.(a,b), with = FALSE]
DT[, -.(a,b)]
q()
packages <- c("jsonlite", "dplyr", "purrr", "tidytext", "ggplot2", "lubridate", "tidyr",
"stringr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
if (Sys.info()[1] == 'Windows'){
setwd('C:/Users/alin/Documents/SelfStudy/MyLearning/Kaggle/TwoSigma/data')
}else{
setwd('/home/alin/MyLearning/Kaggle/TwoSigma/data')
}
raw_train <- fromJSON("train.json")
raw_test <- fromJSON("test.json")
vars <- setdiff(names(raw_train), c("photos", "features"))
train_df <- map_at(raw_train, vars, unlist) %>%
tibble::as_tibble(.) %>%
mutate(interest_level = factor(interest_level, c("low", "medium", "high"))) %>%
select(-c(display_address, street_address)) %>%
mutate(cat = 'train')
test_df <- map_at(raw_test, vars, unlist) %>%
tibble::as_tibble(.) %>%
select(-c(display_address, street_address)) %>%
mutate(cat = 'test', interest_level = NA)
data_df <- rbind(train_df, test_df)
data_df$year <- year(data_df$created)
data_df$month <- month(data_df$created)
data_df$day <- day(data_df$created)
day_by_10 <- function(day){
floor((min(30, day) - 1) / 10)
}
data_df$ten_day <- unlist(map(data_df$day, day_by_10))
dejunk <- function(a){
a <- gsub('<a\\s+website_redacted', '',a)
a <- gsub('<\\S+\\s*/*>', ' ', a)
a <- gsub('\\S+\\s*@\\s*\\S+', ' ', a)
a <- gsub('\\d+[-]*\\d+[-]\\d+', ' ', a)
a <- gsub('\\W+', ' ', a)
a <- gsub('[[:digit:]]', ' ', a)
}
raw_description <- data_df %>%
select(listing_id, description) %>%
mutate(description = dejunk(description))
tidy_description <- raw_description %>%
unnest_tokens(word, description) %>%
anti_join(stop_words)
word_cnt <- tidy_description %>%
count(listing_id) %>%
mutate(word_cnt = n) %>%
select(listing_id, word_cnt)
senti <- tidy_description %>%
inner_join(get_sentiments("afinn")) %>%
group_by(listing_id) %>%
summarise(sentiment1 = sum(score))
negation_words <- c("not", "no", "never", "without")
neg_senti <- raw_description %>%
unnest_tokens(bigram, description, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(word1 %in% negation_words) %>%
inner_join(get_sentiments("afinn"), by = c(word2 = "word")) %>%
group_by(listing_id) %>%
summarise(sentiment2 = -2*sum(score))
sentiment <- senti %>%
left_join(neg_senti)
sentiment[is.na(sentiment$sentiment2), 'sentiment2'] <- 0
sentiment <- sentiment %>%
mutate(sentiment = sentiment1 + sentiment2) %>%
select(listing_id, sentiment)
raw_features <- data_df %>%
select(listing_id, features)
raw_features$features <- apply(raw_features[,2], 1, function(l) tolower(paste(unlist(l), collapse = '|')))
feature_df <- raw_features %>%
transform(features = strsplit(features, '|', fixed = TRUE)) %>%
unnest(features) %>%
tibble::as_tibble(.)
pet_df <- feature_df %>%
filter(str_detect(features, '(^|\\s)(pet|cat|dog)(s$|s\\s|\\s|$)' )) %>%
mutate(pet = 1 - 2* as.integer(str_detect(features, '(^|\\s)no\\s+(pet|cat|dog)'))) %>%
select(listing_id, pet) %>%
group_by(listing_id) %>%
summarise(pet = max(pet))
laundry_df <- feature_df %>%
filter(str_detect(features, 'laundry')) %>%
mutate(laundry = 1) %>%
select(listing_id, laundry) %>%
group_by(listing_id) %>%
summarise(laundry = max(laundry))
pool_df <- feature_df %>%
filter(str_detect(features, '(\\W|^)pool(\\W|$)')) %>%
mutate(pool = 1) %>%
select(listing_id, pool) %>%
group_by(listing_id) %>%
summarise(pool = max(pool))
fee_df <- feature_df %>%
filter(str_detect(features, '(\\W)fee(\\W|$)')) %>%
mutate(fee = 2 * as.integer(str_detect(features, '(^|\\s)no(\\W)')) - 1) %>%
select(listing_id, fee) %>%
group_by(listing_id) %>%
summarise(fee = max(fee))
dishwasher_df <- feature_df %>%
filter(str_detect(features, '(\\W|^)dishwasher(\\W|$)')) %>%
mutate(dishwasher = 1) %>%
select(listing_id, dishwasher) %>%
group_by(listing_id) %>%
summarise(dishwasher = max(dishwasher))
final_df <- data_df %>%
left_join(word_cnt) %>%
left_join(sentiment) %>%
left_join(pet_df) %>%
left_join(laundry_df) %>%
left_join(pool_df) %>%
left_join(fee_df) %>%
left_join(dishwasher_df)
final_df[is.na(final_df$word_cnt), 'word_cnt'] <- 0
final_df[is.na(final_df$sentiment), 'sentiment'] <- 0
final_df[is.na(final_df$pet), 'pet'] <- 0
final_df[is.na(final_df$laundry), 'laundry'] <- 0
final_df[is.na(final_df$pool), 'pool'] <- 0
final_df[is.na(final_df$fee), 'fee'] <- 0
final_df[is.na(final_df$dishwasher), 'dishwasher'] <- 0
final_df$word_cnt <- as.factor(final_df$word_cnt)
final_df$sentiment <- as.factor(final_df$sentiment)
final_df$pet <- as.factor(final_df$pet)
final_df$laundry <- as.factor(final_df$laundry)
final_df$pool <- as.factor(final_df$pool)
final_df$fee <- as.factor(final_df$fee)
final_df$dishwasher <- as.factor(final_df$dishwasher)
final_df$manager_id <- as.factor(final_df$manager_id)
final_df$building_id <- as.factor(final_df$building_id)
final_df$numphotos <- unlist(map(final_df$photos, function(p) length(unlist(p))))
final_df$numfeatures <- unlist(map(final_df$features, function(p) length(unlist(p))))
final_df <- final_df %>%
select(cat, listing_id, bathrooms, bedrooms, latitude, longitude,
price, month, day, ten_day, word_cnt, sentiment, pet, laundry,
pool, fee, dishwasher, numphotos, numfeatures, interest_level,
manager_id, building_id) %>%
mutate(logprice = log(price))
names(final_df)
table(final_df$interest_level)
a <- as.integer(final_df$interest_level)
table(a)
final_df$lvl <- as.integer(final_df$interest_level)
train_df <- final_df %>%
filter(cat == 'train')
names(train_df)
library(caTools)
split <- sample.split((1:nrow(train_df)), SplitRatio = 0.7)
train <- train_df[split,]
valid <- train_df[!split, ]
final_df$mid <- as.integer(as.factor(final_df$manager_id))
final_df$building_id <- as.integer(as.factor(final_df$building_id))
train_df <- final_df %>%
filter(cat == 'train')
split <- sample.split((1:nrow(train_df)), SplitRatio = 0.7)
train <- train_df[split,]
valid <- train_df[!split, ]
names(train)
final_df$building_id[1:3]
varnames <- setdiff(names(train), c('cat', 'listing_id', 'interest_level',
'manager_id'))
varnames
varnames <- setdiff(names(train), c('cat', 'listing_id', 'interest_level',
'manager_id', 'lvl'))
varnames
library(xgboost)
names(train)
names(train[, varnames])
a <- as.matrix(train[,varnames])
train_sparse <- Matrix(as.matrix(train[, varnames]), sparse=TRUE)
library(Matrix)
train_sparse <- Matrix(as.matrix(train[, varnames]), sparse=TRUE)
str(train)
str(train[,varnames])
summary(train[, varnames])
train_sparse <- Matrix(as.matrix(train[, varnames]), sparse=TRUE)
a <- as.matrix(train[, varnames])
class(a)
dim(a)
b <- Matrix(a)
summary(train[, varnames])
final_df <- data_df %>%
left_join(word_cnt) %>%
left_join(sentiment) %>%
left_join(pet_df) %>%
left_join(laundry_df) %>%
left_join(pool_df) %>%
left_join(fee_df) %>%
left_join(dishwasher_df)
final_df[is.na(final_df$word_cnt), 'word_cnt'] <- 0
final_df[is.na(final_df$sentiment), 'sentiment'] <- 0
final_df[is.na(final_df$pet), 'pet'] <- 0
final_df[is.na(final_df$laundry), 'laundry'] <- 0
final_df[is.na(final_df$pool), 'pool'] <- 0
final_df[is.na(final_df$fee), 'fee'] <- 0
final_df[is.na(final_df$dishwasher), 'dishwasher'] <- 0
final_df$numphotos <- unlist(map(final_df$photos, function(p) length(unlist(p))))
final_df$numfeatures <- unlist(map(final_df$features, function(p) length(unlist(p))))
final_df <- final_df %>%
select(cat, listing_id, bathrooms, bedrooms, latitude, longitude,
price, month, day, ten_day, word_cnt, sentiment, pet, laundry,
pool, fee, dishwasher, numphotos, numfeatures, interest_level,
manager_id, building_id) %>%
mutate(logprice = log(price))
final_df$lvl <- as.integer(final_df$interest_level)
final_df$mid <- as.integer(as.factor(final_df$manager_id))
final_df$building_id <- as.integer(as.factor(final_df$building_id))
train_df <- final_df %>%
filter(cat == 'train')
train <- train_df[split,]
valid <- train_df[!split, ]
train_sparse <- Matrix(as.matrix(train[, varnames]), sparse=TRUE)
valid_sparse <- Matrix(as.matrix(valid[, varnames]), sparse=TRUE)
labels <- train$lvl
dtrain <- xgb.DMatrix(data=train_sparse, label=labels)
dvalid <- xgb.DMatrix(data=valid_sparse)
param <- list(booster="gbtree",
objective="multi:softprob",
eval_metric="mlogloss",
nthread=13,
num_class=3,
eta = .02,
gamma = 1,
max_depth = 4,
min_child_weight = 1,
subsample = .7,
colsample_bytree = .5
)
xgb2 <- xgb.train(data = dtrain,
params = param,
# watchlist=watch,
# nrounds = xgb2cv$best_ntreelimit
nrounds = 3100
)
final_df$lvl <- as.integer(final_df$interest_level) - 1
table(final_df$lvl)
train_df <- final_df %>%
filter(cat == 'train')
train <- train_df[split,]
valid <- train_df[!split, ]
train_sparse <- Matrix(as.matrix(train[, varnames]), sparse=TRUE)
valid_sparse <- Matrix(as.matrix(valid[, varnames]), sparse=TRUE)
#listing_id_test <- ts1[filter %in% c(1), listing_id]
labels <- train$lvl
dtrain <- xgb.DMatrix(data=train_sparse, label=labels)
dvalid <- xgb.DMatrix(data=valid_sparse)
xgb2 <- xgb.train(data = dtrain,
params = param,
# watchlist=watch,
# nrounds = xgb2cv$best_ntreelimit
nrounds = 3100
)
pred <- predict(xgb2, dvalid)
class(pred)
str(pred)
nrow(valid)
14806*3
0.6447+0.3046+0.0507
m1 <- t(matrix(pred, nrow = 3, ncol = nrow(dvalid)))
dim(m1)
m1[1:10,]
m[1,1]
m1[1,1]
s1$lvl[1:10]
valid$lvl[1:10]
table(valid$lvl, valid$interest_level)
valid$lvl[3]
m1[3,0+1]
m1[1:4]
m1[1:4,]
score <- 0
for(i in 1:nrow(valid)){
l <- valid$lvl[i]
score <- score - log(m1[i, l+1])
}
print(score)
score <- 0
for(i in 1:3){
l <- valid$lvl[i]
score <- score - log(m1[i, l+1])
}
print(score)
valid$lvl[1:3]
m1[1:3,]
log(0.050685413) + log(0.5553365) + log(0.0420596)
score <- 0
for(i in 1:3){
l <- valid$lvl[i]
score <- score - log(m1[i, l+1])
}
score <- score/nrow(valid)
print(score)
score <- 0
for(i in 1:nrow(valid)){
l <- valid$lvl[i]
score <- score - log(m1[i, l+1])
}
score <- score/nrow(valid)
print(score)
names(train)
q()
