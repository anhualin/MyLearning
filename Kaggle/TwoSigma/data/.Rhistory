packages <- c("jsonlite", "dplyr", "purrr", "tidytext", "ggplot2", "lubridate")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
#setwd('C:/Users/alin/Documents/SelfStudy/MyLearning/Kaggle/TwoSigma/data')
setwd('/home/alin/MyLearning/Kaggle/TwoSigma/data')
data <- fromJSON("train.json")
# unlist every variable except `photos` and `features` and convert to tibble
vars <- setdiff(names(data), c("photos", "features"))
#library(tibble)?
#library(purrr)
train_df <- map_at(data, vars, unlist) %>%
tibble::as_tibble(.) %>%
mutate(interest_level = factor(interest_level, c("low", "medium", "high")))
library(stringr)
train0 <- train_df[1:500, c('listing_id', 'description')]
dejunk <- function(a){
a <- gsub('<a\\s+website_redacted', '',a)
a <- gsub('<\\S+\\s*/*>', ' ', a)
a <- gsub('\\S+\\s*@\\s*\\S+', ' ', a)
a <- gsub('\\d+[-]*\\d+[-]\\d+', ' ', a)
a <- gsub('\\W+', ' ', a)
a <- gsub('[[:digit:]]', ' ', a)
}
train0$description_tr <- unlist(train0 %>% select(description) %>% map(dejunk))
train0$description <- NULL
train2 <- train0 %>%
unnest_tokens(word, description_tr) %>%
anti_join(stop_words)
str(train2)
train3 <- train0 %>%
filter(str_detect(word, "[a-z']$"),
!word %in% stop_words$word)
train3 <- train0 %>%
unnest_tokens(word, description_tr) %>%
filter(str_detect(word, "[a-z']$"),
!word %in% stop_words$word)
str(train3)
str(train2)
word_cnt <- train2 %>%
count(listing_id)
word_cnt
train0a <- train0 %>%
left_join(word_cnt)
train0a
word_cnt <- train2 %>%
count(listing_id) %>%
mutate(word_cnt = n)
word_cnt
train0a <- train0 %>%
left_join(word_cnt)
train0a
word_cnt
train0a
a <- train0a %>%
filter(is.na(word_cnt))
a
train0a[is.na(train0a$word_cnt), 'word_cnt'] <- 0
train0a %>%
filter(word_cnt == 0)
head(train1)
head(train2)
senti <- train2 %>%
inner_join(
('bing'))
senti <- train2 %>%
inner_join(get_sentiments("bing"))
senti
senti <- train2 %>%
inner_join(get_sentiments("nrc"))
senti
senti <- train2 %>%
inner_join(get_sentiments("bing"))
senti
senti <- train2 %>%
inner_join(get_sentiments("bing")) %>%
count(listing_id, sentiment)
senti
?spread
senti <- train2 %>%
inner_join(get_sentiments("bing")) %>%
count(listing_id, sentiment) %>%
spread(sentiment, n, fill = 0)
sentiment <- get_nrc_sentiment(tra
library(tidyr)
library(tidyr)
senti <- train2 %>%
inner_join(get_sentiments("bing")) %>%
count(listing_id, sentiment) %>%
spread(sentiment, n, fill = 0)
senti
senti <- train2 %>%
inner_join(get_sentiments("bing")) %>%
count(listing_id, sentiment) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
senti
senti[400:410,]
train0a
train0b <- train0a %>%
left-join(senti) %>%
select(listing_id, word_cnt, sentiment)
train0b <- train0a %>%
left_join(senti) %>%
select(listing_id, word_cnt, sentiment)
train0b
pet <- train2 %>%
filter(word == 'dog' | word == 'cat')
pet
train0 %>%
filter(listing_id == 7202273)
train0 %>%
filter(listing_id == 7202273) %>%
select(description_tr)
train0[train0$listing_id == 7202273, 'description_tr']
pet
train_df[train_df$listing_id == 7202273, 'description']
a <- train_df[train_df$listing_id == 7202273, 'description']
a
b <- a[[1]]
b
?unnest_token
?unnest_tokens
train4 <- train0 %>%
unnest_tokens(bigram, description_tr, token = "ngrams", n =2 )
train0
train4
a <- train_df[train_df$listing_id == 7087718, 'description'][[1]]
a
class(a)
a[[1]]
train4
a <- train4 %>%
filter(biram = 'no dog')
a <- train4 %>%
filter(biram == 'no dog')
a <- train4 %>%
filter(bigram == 'no dog')
a
train4
a <- train4 %>%
filter(bigram == 'queen beds')
a
a <- train4 %>%
filter(bigram == 'cats allowed')
a
a <- train4 %>%
filter(bigram == 'no pet')
a
a <- train4 %>%
filter(bigram == 'no pets')
a
x <- train_df[train_df$listing_id == 7111210, 'description']
x
x[[1]]
a <- train4 %>%
filter(bigram == 'no pets' | bigram == 'cats allowed')
a
names(train-df)
names(train_df)
summary(train_df$price)
a <- train_df$features
class(a)
length(a)
a[1]
a[2]
a[100]
a[100][1]
a[100][1][1]
x <- a[100]
class(x)
length(x)
y <- x[[1]]
y
class(y)
y.split()
?split
split(y)
strsplit((y))
?strsplit
strsplit(y, ' ')
strsplit(y, '\"')
g <- strsplit(y, '\"')
g
length(g)
h <- g[[1]]
h
a <- train-df$features
a <- train_df$features
b <- a[1]
b
class(b)
length(b)
b$4
b[[1]]
length(b[[1]])
b <- a[1][[1]]
b
b[1]
b[3]
g <- a[5000][[1]]
g
g[1]
g[3]
q()
