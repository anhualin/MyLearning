geom_point(data=dat.m,
aes(Subject, value, colour=variable, shape=variable), size=4) +
geom_segment(data=dat %>% filter(Continued==1),
aes(x=Subject, xend=Subject, y=Months + 0.1, yend=Months + 1),
pch=15, size=0.8, arrow=arrow(type="closed", length=unit(0.1,"in"))) +
coord_flip() +
geom_hline(yintercept=3) +
scale_colour_manual(values=c(hcl(seq(15,375,length.out=3)[1:2],100),"red", "black"))
ggplot(dat, aes(Subject, Months)) +
geom_bar(stat="identity", aes(fill=factor(Stage)), width=0.8) +
geom_point(data=dat.m,
aes(Subject, value, colour=variable, shape=variable), size=4) +
geom_segment(data=dat %>% filter(Continued==1),
aes(x=Subject, xend=Subject, y=Months + 0.1, yend=Months + 1),
pch=15, size=0.8, arrow=arrow(type="closed", length=unit(0.1,"in"))) +
coord_flip() +
geom_hline(yintercept=3) +
scale_colour_manual(values=c(hcl(seq(15,375,length.out=3)[1:2],100, 100),"red", "black"))
ggplot(dat, aes(Subject, Months)) +
geom_bar(stat="identity", aes(fill=factor(Stage)), width=0.8) +
geom_point(data=dat.m,
aes(Subject, value, colour=variable, shape=variable), size=4) +
geom_segment(data=dat %>% filter(Continued==1),
aes(x=Subject, xend=Subject, y=Months + 0.1, yend=Months + 1),
pch=15, size=0.8, arrow=arrow(type="closed", length=unit(0.1,"in"))) +
coord_flip() +
geom_hline(yintercept=3) +
scale_colour_manual(values=c(hcl(seq(15,375,length.out=3)[1:2],100, 100),"black", "black"))
ggplot(dat, aes(Subject, Months)) +
geom_bar(stat="identity", aes(fill=factor(Stage)), width=0.8) +
geom_point(data=dat.m,
aes(Subject, value, colour=variable, shape=variable), size=4) +
geom_segment(data=dat %>% filter(Continued==1),
aes(x=Subject, xend=Subject, y=Months + 0.1, yend=Months + 1),
pch=15, size=0.8, arrow=arrow(type="closed", length=unit(0.1,"in"))) +
coord_flip() +
geom_hline(yintercept=3) +
scale_colour_manual(values=c(hcl(seq(15,375,length.out=3)[1:2],100, 40),"black", "black"))
ggplot(dat, aes(Subject, Months)) +
geom_bar(stat="identity", aes(fill=factor(Stage)), width=0.8) +
geom_point(data=dat.m,
aes(Subject, value, colour=variable, shape=variable), size=4) +
geom_segment(data=dat %>% filter(Continued==1),
aes(x=Subject, xend=Subject, y=Months + 0.1, yend=Months + 1),
pch=15, size=0.8, arrow=arrow(type="closed", length=unit(0.1,"in"))) +
coord_flip() +
geom_hline(yintercept=3) +
scale_fill_manual(values=hcl(seq(15,375,length.out=5)[1:4],100,70)) +
scale_colour_manual(values=c(hcl(seq(15,375,length.out=3)[1:2],100,40),"black")) +
scale_y_continuous(limits=c(-1,20), breaks=0:20)
dat
dat.m
dat = data.frame(Subject = 1:10,
Months = sample(4:20, 10, replace=TRUE),
Treated=sample(0:1, 10, replace=TRUE),
Stage = sample(1:4, 10, replace=TRUE),
Continued=sample(0:1, 10, replace=TRUE))
dat
ggplot(dat, aes(Subject, Months)) +
geom_bar(stat="identity", aes(fill=factor(Stage)), width=0.8)
ggplot(dat, aes(Subject, Months)) +
geom_bar(stat="identity", aes(fill=factor(Stage)), width=0.8) +
geom_point(data=dat.m,
aes(Subject, value, colour=variable, shape=variable), size=4) +
geom_segment(data=dat %>% filter(Continued==1),
aes(x=Subject, xend=Subject, y=Months + 0.1, yend=Months + 1),
pch=15, size=0.8, arrow=arrow(type="closed", length=unit(0.1,"in"))) +
coord_flip() +
geom_hline(yintercept=3) +
scale_fill_manual(values=hcl(seq(15,375,length.out=5)[1:4],100,70)) +
scale_colour_manual(values=c(hcl(seq(15,375,length.out=3)[1:2],100,40),"black")) +
scale_y_continuous(limits=c(-1,20), breaks=0:20) +
labs(fill="Disease Stage", colour="", shape="",
x="Subject Recevied Study Drug") +
theme_bw() +
theme(panel.grid.minor=element_blank(),
panel.grid.major=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
q()
q()
library(data.table)
install.packages("jsonlite")
install.packages(c("dplyr", "purrr", "tidytext"))
install.packages(c("syuzhet", "DT", "randomForest"))
library(data.table)
install.packages(c("data.table", "tibble"))
install.packages(c("tidry", "lubridate"))
q()
92058.46+98458.09 + 11685.20
0.46 + 0.09 + 0.20
92058+98458+11685
202201.75 + 17.13
75+13
options(digits=2)
202201.75 + 17.13
options(digits=10)
202201.75 + 17.13
830.84 + 7257.23 + 6662.12
14750.19 + 5607.49
20357.68 + 5459.62 + 1800
202218.88 - 27617.3
4050*3
174601.58 - 12150
162451.58 * 0.28 - 13014.50
174601.58 + 27617.3
27617.30
27167.3 * 0.8
202218.88
202218.88 - 83800
202218.88 - 159700
42518.88 * 0.25
118418.88 + 10629.72
129048.6 * 0.26
174601.58 + 20357.68
194959.26 - 159700
35259.26 * 0.25
83800 - 8814.82
194959.26 - 74985.18
119974.08 * 0.26
2075*12
24900+375
11685.20 + 92058.46
202218.88 - 110000
93000 * 0.05
32471.94 - 600
407.99 + 10600.89 + 21258.46
32267.34 - 31871.94
202218.88 - 1800
27617.30 - 14750.19
200418.88 - 12867.11
37551.77 * 0.05
1877.5885 + 7072.50
187551.77 * 0.032
8950.09 + 6001.66
14951.75 - 14750.19
q()
q()
q()
q()
q()
q()
text <- c("Because I could not stop for Death -",
"He kindly stopped for me -",
"The Carriage held but just Ourselves -",
"and Immortality")
text
library(dplyr)
library(ggplot2)
text_df <- data_frame(line = 1:4, text = text)
library(tidytext)
text_df %>%
unnest_tokens(word, text)
test_df
text_df
library(janeaustenr)
#library(dplyr)
library(stringr)
?austen_books
a <- austen_books()
str(a)
a
head(a)
a[500:550,]
a <- austen_books() %>% group_by(book)
str(a)
a
?row_number()
?cumsum
?row_number()
?cumsum
a <- austen_books()
str(a)
b <- a[1:100, ]
b
b[50:55,]
g <- mutate(b, cha = str_detect(text, regex("^chapter [\\divxlc]", ignore_case = TRUE)))
g
?regex
g <- mutate(b, cha = str_detect(text, regex("^chapter [ivxlc]", ignore_case = TRUE)))
g
g <- mutate(b, cha = str_detect(text, regex("^chapter [\\d]", ignore_case = TRUE)))
g
g <- mutate(b, cha = cumsum(str_detect(text, regex("^chapter [\\d]", ignore_case = TRUE))))
g
g[1:20,]
?ungroup
original_books <- austen_books() %>%
group_by(book) %>%
mutate(linenumber = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]",
ignore_case = TRUE)))) %>%
ungroup()
original_books
tidy_books <- original_books %>%
unnest_tokens(word, text)
str(tidy_books)
tidy_books
?anti_join
data("stop_words")
tidy_books <- tidy_books %>%
anti_join(stop_words)
tidy_books
?count
tidy_books %>%
count(word, sort = TRUE)
?reorder
tidy_books %>%
count(word, sort = TRUE) %>%
filter(n > 600) %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(word, n)) +
geom_col() +
xlab(NULL) +
coord_flip()
q()
library(tidytext)
sentiments
get_sentiments("afinn")
get_sentiments("bing")
get_sentiments("nrc")
q()
library(h2o)
q()
q()
q()
x <- c(5,9.2,3,8.51,NA),
x <- c(5,9.2,3,8.51,NA)
mean(x)
mean(x, na.rm = TRUE)
x[0]
x[1]
q()
q()
library(data.table)
DT = data.table(a = c('x', 'y', 'x','z'), b = 1:4)
DT
library(Matrix)
DT = data.table(a = c('x', 'y', 'x','z'), b = 1:4, g = c('a', 'b','a', 'c'))
DT
sparse_matrix <- sparse.model.matrix(a ~ .-1, data = DT)
sparse_matrix
dummies <- dummyVars(~ a + g, data = DT)
?dummyVars
install.packages("xgboost")
q()
packages <- c("jsonlite", "dplyr", "purrr")
purrr::walk(packages, library, character.only = TRUE, warn.conflicts = FALSE)
library(data.table)
library(xgboost)
library(caret)
library(stringr)
library(quanteda)
library(lubridate)
library(stringr)
library(Hmisc)
library(Matrix)
install.packages(c("caret", "Hmisc"))
library(data.table)
library(xgboost)
library(caret)
library(stringr)
library(quanteda)
library(lubridate)
library(stringr)
library(Hmisc)
library(Matrix)
if (Sys.info()[1] == 'Windows'){
setwd('C:/Users/alin/Documents/SelfStudy/MyLearning/Kaggle/TwoSigma/data')
}else{
setwd('/home/alin/MyLearning/Kaggle/TwoSigma/data')
}
t1 <- fromJSON("train.json")
t1_feats <- data.table(listing_id=rep(unlist(t1$listing_id), lapply(t1$features, length)), features=unlist(t1$features))
t1_photos <- data.table(listing_id=rep(unlist(t1$listing_id), lapply(t1$photos, length)), features=unlist(t1$photos))
vars <- setdiff(names(t1), c("photos", "features"))
t1<- map_at(t1, vars, unlist) %>% as.data.table(.)
t1[,":="(filter=0)]
class <- data.table(interest_level=c("low", "medium", "high"), class=c(0,1,2))
t1 <- merge(t1, class, by="interest_level", all.x=TRUE, sort=F)
names(t1)
library(caTools)
split <- sample.split((1:nrow(t1)), SplitRatio = 0.7)
ts1 <- t1
ts1$filter <- 1 - split
ts1_feats <- t1_feats
ts1_photos <- t1_photos
valid <- ts1[filter == 1,]
ts1[filter == 1, 'interest_level' ] <- '-1'
ts1[,":="(created=as.POSIXct(created)
,dummy="A"
,low=as.integer(interest_level=="low")
,medium=as.integer(interest_level=="medium")
,high=as.integer(interest_level=="high")
,display_address=trimws(tolower(display_address))
,street_address=trimws(tolower(street_address)))]
ts1[, ":="(pred0_low=sum(interest_level=="low")/sum(filter==0),
pred0_medium=sum(interest_level=="medium")/sum(filter==0),
pred0_high=sum(interest_level=="high")/sum(filter==0))]
ts1[1:5, 'created']
class(ts1_feats)
nrow(ts1_feats)
ts1[1:5,]
ts1_feats[1:5,]
ts1_feats[,features:=gsub(" ", "_", paste0("feature_",trimws(char_tolower(features))))]
library(stringi)
ts1_feats[,features:=gsub(" ", "_", paste0("feature_",trimws(char_tolower(features))))]
?char_tolower
library(quanteda)
install.packages("quanteda")
library(quanteda)
ts1_feats[,features:=gsub(" ", "_", paste0("feature_",trimws(char_tolower(features))))]
ts1_feats[1:5,]
feats_summ <- ts1_feats[,.N, by=features]
nrow(feats_summ)
feats_summ[1:10,]
?dcast.data.table
class(feats_summ)
names(ChickWeight) <- tolower(names(ChickWeight))
DT <- melt(as.data.table(ChickWeight), id=2:4) # calls melt.data.table
DT
table(DT$variable)
DT1 <- dcast(DT, time ~ variable, fun=mean)
DT1
DT <- DT[time <=8]
DT
DT<- DT[1:10]
DT
DT1 <- dcast.data.table(DT, time ~ variable, fun = mean())
DT1 <- dcast.data.table(DT, time ~ variable, fun = mean
)
DT1
DT2 <- DT[,.(time, chick,variable)]
DT2
DT3 <- dcast(DT2, time ~ variable, fun = mean)
DT2[,":="(x = 1)]
DT2
DT3 <- dcast(DT2, time ~ variable, fun = mean)
DT3
DT2[,":"(y=3)]
DT2[,":="(y=3)]
DT2
DT3 <- dcast(DT2, time ~ variable, fun = mean)
DT3
DT3 <- dcast(DT2, time ~ variable, fun = mean, value.var = x)
DT2
DT3 <- dcast(DT2, time ~ variable, fun = mean, value.var = "x")
DT3
x <- ts1_feats[1:10]
x
z <- ts1_feats[!features %in% feats_summ[N<10, features]]
class(z)
nrow(z)
z[1:10]
y <- dcast.data.table(x, listing_id ~ features,
fun.aggregate = function(x) as.integer(length(x) > 0),
value.var = "features")
y
names(feats_summ)
g <- feats_summ[N >= 10, .N]
g
ts1_feats_cast <- dcast.data.table(ts1_feats[!features %in% feats_summ[N<10, features]], listing_id ~ features, fun.aggregate = function(x) as.integer(length(x) > 0), value.var = "features")
nrow(ts1_feats_cast)
ncol(ts1_feats_cast)
nrow(ts1)
?merge
ts1 <- merge(ts1, ts1_feats_cast, by="listing_id", all.x=TRUE, sort=FALSE)
rm(ts1_feats_cast);gc()
names(ts1)
ts1_photos_summ <- ts1_photos[,.(photo_count=.N), by=listing_id]
ts1 <- merge(ts1, ts1_photos_summ, by="listing_id", all.x=TRUE, sort=FALSE)
rm(ts1_photos, ts1_photos_summ);gc()
names(ts1)
build_count <- ts1[,.(.N), by=building_id]
manag_count <- ts1[,.(.N), by=manager_id]
nrow(ts1)
nrow(build_count)
nrow(manag_count)
add_count <- ts1[,.(.N), by=display_address]
nrow(add_count)
print("creating some more features")
ts1[,":="(building_id=as.integer(as.factor(building_id))
,display_address=as.integer(as.factor(display_address))
,manager_id=as.integer(as.factor(manager_id))
,street_address=as.integer(as.factor(street_address))
,desc_wordcount=str_count(description)
,pricePerBed=ifelse(!is.finite(price/bedrooms),-1, price/bedrooms)
,pricePerBath=ifelse(!is.finite(price/bathrooms),-1, price/bathrooms)
,pricePerRoom=ifelse(!is.finite(price/(bedrooms+bathrooms)),-1, price/(bedrooms+bathrooms))
,bedPerBath=ifelse(!is.finite(bedrooms/bathrooms), -1, price/bathrooms)
,bedBathDiff=bedrooms-bathrooms
,bedBathSum=bedrooms+bathrooms
,bedsPerc=ifelse(!is.finite(bedrooms/(bedrooms+bathrooms)), -1, bedrooms/(bedrooms+bathrooms)))
]
nrow(ts1)
table(ts1$filter)
print("fill in missing values")
for (col in 1:ncol(ts1)){
set(ts1, i=which(is.na(ts1[[col]])), j=col, value=-1)
}
varnames <- setdiff(colnames(ts1), c("photos","pred0_high", "pred0_low","pred0_medium","description", "features","interest_level","dummy","filter", "created", "class", "low","medium","high","street"))
varnames
table(ts1$filter)
t1_sparse <- Matrix(as.matrix(ts1[filter==0, varnames, with=FALSE]), sparse=TRUE)
s1_sparse <- Matrix(as.matrix(ts1[filter==1, varnames, with=FALSE]), sparse=TRUE)
listing_id_test <- ts1[filter %in% c(1), listing_id]
labels <- ts1[filter %in% c(0), class]
test_labels <- ts1[filter %in% c(1), class]
dtrain <- xgb.DMatrix(data=t1_sparse, label=labels)
dtest <- xgb.DMatrix(data=s1_sparse)
param <- list(booster="gbtree",
objective="multi:softprob",
eval_metric="mlogloss",
nthread=13,
num_class=3,
eta = .02,
gamma = 1,
max_depth = 4,
min_child_weight = 1,
subsample = .7,
colsample_bytree = .5
)
xgb2 <- xgb.train(data = dtrain,
params = param,
# watchlist=watch,
# nrounds = xgb2cv$best_ntreelimit
nrounds = 3100
)
nrow(test)
nrow(dtest)
class(dtest)
sPreds <- as.data.table(t(matrix(predict(xgb2, dtest), nrow=3, ncol=nrow(dtest))))
class(sPreds)
names(sPreds)
nrow(sPreds)
colnames(sPreds) <- class$interest_level
names(sPreds)
class
names(listing_id_test)
length(listing_id_test)
nrow(test_labels)
test_labels[1:10]
sPreds[1:10,]
test_labels <- ts1[filter %in% c(1), interest_level]
test_labels[1:10]
test_labels <- ts1[filter %in% c(1), class]
test_labels[1:10]
colnames(sPreds) <- class$class
colnames(sPreds) <- class$interest_level
valid <- data.table(listing_id = listing_id_test, true_label = test_labels,
sPreds[,list(high,medium,low)])
names(valid)
valid[1:10]
class
class2label <- function(i){
if(class==0){
"low"
}else if(class==1){
"medium"
}else{
"high"
}
}
class2label(2)
class2label <- function(i){
if(i==0){
"low"
}else if(i==1){
"medium"
}else{
"high"
}
}
class2label(1)
valid$interest_level <- class2label(valid$true_label)
valid$interest_level[1:10]
?apply
valid$interest_level <- apply(valid, 1, class2label)
valid[1:10]
valid$interest_level <- apply(valid, 2, class2label)
valid[1:10]
valid$interest_level <- apply(valid$true_label, 2, class2label)
valid$interest_level <- apply(valid$true_label, 1, class2label)
valid$true_label[1:10]
valid$interest_level <- apply(valid[, .(true_label)], 1, class2label)
valid[1:10]
logloss <- function(result){
score <- 0
for(i in 1:nrow(result)){
score <- score - log(result[i, as.character(result[i, 'interest_level'])])
}
score <- score/nrow(result)
}
print(logloss(valid))
valid[1:10]
valid[1, 'interest_level']
valid[i, as.character(valid[1, 'interest_level'])]
valid[1, as.character(valid[1, 'interest_level'])]
valid[1, 'medium']
str(valid)
valid[1, as.character(valid[1, 'interest_level'])]
valid[1, as.character(valid[1, 'interest_level']), with = FALSe]
valid[1, as.character(valid[1, 'interest_level']), with = FALSE]
logloss <- function(result){
score <- 0
for(i in 1:nrow(result)){
score <- score - log(result[i, as.character(result[i, 'interest_level']), with = FALSE])
}
score <- score/nrow(result)
}
print(logloss(valid))
q()
